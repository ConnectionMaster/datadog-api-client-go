openapi: 3.0.0
info:
  contact:
    email: support@datadoghq.com
    name: Datadog Support
    url: https://www.datadoghq.com/support/
  description: Collection of all Datadog Public endpoints.
  title: Datadog API Collection
  version: "1.0"
servers:
- url: https://{subdomain}.{site}
  variables:
    site:
      default: datadoghq.com
      description: The regional site for our customers.
      enum:
      - datadoghq.com
      - datadoghq.eu
    subdomain:
      default: api
      description: The subdomain where the API is deployed.
- url: '{protocol}://{name}'
  variables:
    name:
      default: api.datadoghq.com
      description: Full site DNS name.
    protocol:
      default: https
      description: The protocol for accessing the API.
security:
- apiKeyAuth: []
  appKeyAuth: []
tags:
- description: |-
    [Interact with your dashboard lists](https://docs.datadoghq.com/monitors/downtimes)
    through the API to make it easier to organize, find, and share all of your dashboards
    with your team and organization.
  name: DashboardLists
- description: Interact with incidents api endpoints.
  name: Incidents
- description: Interact with incidents configuration API.
  name: IncidentsConfig
- description: Create, update, delete and retrieve your organizations services.
  name: Services
- description: Create, update, delete and retrieve your organizations Teams.
  name: Teams
- description: Create, edit, and disable users.
  externalDocs:
    url: https://docs.datadoghq.com/account_management/users
  name: Users
paths:
  /api/v1/incidents:
    get:
      description: Get all incidents for a given organization. If the `with_users`
        query parameter is not set, the included attribute and associated user relationships
        will not be returned.
      operationId: GetIncidents
      parameters:
      - description: Include user data in api response.
        explode: true
        in: query
        name: with_users
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: maximum number of incidents to return.
        explode: true
        in: query
        name: page[limit]
        required: false
        schema:
          default: 1000
          format: int64
          type: integer
        style: form
      - description: index of the first element for the query.
        explode: true
        in: query
        name: page[offset]
        required: false
        schema:
          default: 0
          format: int64
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncidentListPayload'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
      summary: Get a list of incidents
      tags:
      - Incidents
      x-unstable: true
    post:
      description: Creates a new incident.
      operationId: CreateIncident
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IncidentCreateWithInitialDataPayload'
        description: Incident Payload.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncidentPayload'
          description: CREATED
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not Found
      summary: Create a new incident
      tags:
      - Incidents
      x-codegen-request-body-name: body
      x-unstable: true
  /api/v1/incidents/config/fields:
    get:
      description: Get all fields for a given organization. If the `with_users` query
        parameter is not set, the included attribute and associated user relationships
        will not be returned.
      operationId: GetIncidentConfigFields
      parameters:
      - description: Include user data in api response.
        explode: true
        in: query
        name: with_users
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: maximum number of incidents to return.
        explode: true
        in: query
        name: page[limit]
        required: false
        schema:
          default: 1000
          format: int64
          type: integer
        style: form
      - description: index of the first element for the query.
        explode: true
        in: query
        name: page[offset]
        required: false
        schema:
          default: 0
          format: int64
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncidentConfigFieldListPayload'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
      summary: Get a list of all configuration fields
      tags:
      - IncidentsConfig
      x-unstable: true
    post:
      description: Creates a new field. Note, `default_choice_id` cannot be set until
        after the field and a valid choice has been created.
      operationId: CreateIncidentConfigField
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IncidentConfigFieldPayload'
        description: Incident Configuration Field Payload.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncidentConfigFieldPayload'
          description: CREATED
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not Found
      summary: Create a new incident configuration field
      tags:
      - IncidentsConfig
      x-codegen-request-body-name: body
      x-unstable: true
  /api/v1/incidents/config/fields/{field_id}:
    delete:
      description: Deletes an existing field.
      operationId: DeleteIncidentConfigField
      parameters:
      - description: The ID of the incident field.
        explode: false
        in: path
        name: field_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: DELETED
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not Found
      summary: Deletes an existing field
      tags:
      - IncidentsConfig
      x-unstable: true
    get:
      description: Get the details of a configuration field.
      operationId: GetIncidentConfigField
      parameters:
      - description: The ID of the incident field.
        explode: false
        in: path
        name: field_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncidentConfigFieldPayload'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not Found
      summary: Get the details of a field
      tags:
      - IncidentsConfig
      x-unstable: true
    patch:
      description: Updates an existing field. Only provide the attributes which should
        be updated as this request is a partial update.
      operationId: PatchIncidentConfigField
      parameters:
      - description: The ID of the incident field.
        explode: false
        in: path
        name: field_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IncidentConfigFieldPayload'
        description: Incident Configuration Field Payload.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncidentConfigFieldPayload'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not Found
      summary: Updates an existing configuration field
      tags:
      - IncidentsConfig
      x-codegen-request-body-name: body
      x-unstable: true
  /api/v1/incidents/config/fields/{field_id}/relationships/choices:
    get:
      description: Get all choices for a given field.
      operationId: GetIncidentConfigFieldChoices
      parameters:
      - description: The ID of the incident field.
        explode: false
        in: path
        name: field_id
        required: true
        schema:
          type: string
        style: simple
      - description: Include user data in api response.
        explode: true
        in: query
        name: with_users
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: maximum number of incidents to return.
        explode: true
        in: query
        name: page[limit]
        required: false
        schema:
          default: 1000
          format: int64
          type: integer
        style: form
      - description: index of the first element for the query.
        explode: true
        in: query
        name: page[offset]
        required: false
        schema:
          default: 0
          format: int64
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncidentConfigFieldChoiceListPayload'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
      summary: Get all choices for the given field
      tags:
      - IncidentsConfig
      x-unstable: true
    post:
      description: Creates a new choice for the given configuration field.
      operationId: CreateIncidentConfigFieldChoice
      parameters:
      - description: The ID of the incident field.
        explode: false
        in: path
        name: field_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IncidentConfigFieldChoicePayload'
        description: Incident Configuration Field Choice Payload.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncidentConfigFieldChoicePayload'
          description: CREATED
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not Found
      summary: Create a new choice
      tags:
      - IncidentsConfig
      x-codegen-request-body-name: body
      x-unstable: true
  /api/v1/incidents/config/fields/{field_id}/relationships/choices/{choice_id}:
    delete:
      description: Deletes an existing choice for the given field.
      operationId: DeleteIncidentConfigFieldChoice
      parameters:
      - description: The ID of the incident field.
        explode: false
        in: path
        name: field_id
        required: true
        schema:
          type: string
        style: simple
      - description: The ID of the incident field choice.
        explode: false
        in: path
        name: choice_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: DELETED
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not Found
      summary: Update an existing choice for the given incident
      tags:
      - IncidentsConfig
      x-unstable: true
    get:
      description: Get the details of a field choice.
      operationId: GetIncidentConfigFieldChoice
      parameters:
      - description: The ID of the incident field.
        explode: false
        in: path
        name: field_id
        required: true
        schema:
          type: string
        style: simple
      - description: The ID of the incident field choice.
        explode: false
        in: path
        name: choice_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncidentConfigFieldChoicePayload'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not Found
      summary: Get the details of a field choice
      tags:
      - IncidentsConfig
      x-unstable: true
    patch:
      description: Updates an existing choice. Only provide the attributes which should
        be updated as this request is a partial update.
      operationId: PatchIncidentConfigFieldChoice
      parameters:
      - description: The ID of the incident field.
        explode: false
        in: path
        name: field_id
        required: true
        schema:
          type: string
        style: simple
      - description: The ID of the incident field choice.
        explode: false
        in: path
        name: choice_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IncidentConfigFieldChoicePayload'
        description: Incident Configuration Field Choice Payload.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncidentConfigFieldChoicePayload'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not Found
      summary: Update an existing field choice
      tags:
      - IncidentsConfig
      x-codegen-request-body-name: body
      x-unstable: true
  /api/v1/incidents/search:
    get:
      description: Search for incidents using our string query to retrieve matched
        queries.
      operationId: SearchIncidents
      parameters:
      - description: Scope incidents to created before epoch timestamp.
        explode: true
        in: query
        name: filter[created_before]
        required: false
        schema:
          format: int64
          nullable: false
          type: integer
        style: form
      - description: Scope incidents to created after epoch timestamp.
        explode: true
        in: query
        name: filter[created_after]
        required: false
        schema:
          format: int64
          nullable: false
          type: integer
        style: form
      - description: Scope incidents to last modified before epoch timestamp.
        explode: true
        in: query
        name: filter[last_modified_before]
        required: false
        schema:
          format: int64
          nullable: false
          type: integer
        style: form
      - description: Scope incidents to last modified after epoch timestamp.
        explode: true
        in: query
        name: filter[last_modified_after]
        required: false
        schema:
          format: int64
          nullable: false
          type: integer
        style: form
      - description: Scope incidents to deleted before epoch timestamp.
        explode: true
        in: query
        name: filter[deleted_before]
        required: false
        schema:
          format: int64
          nullable: false
          type: integer
        style: form
      - description: Scope incidents to deleted after epoch timestamp.
        explode: true
        in: query
        name: filter[deleted_after]
        required: false
        schema:
          format: int64
          nullable: false
          type: integer
        style: form
      - description: Scope incidents to deleted resolved epoch timestamp.
        explode: true
        in: query
        name: filter[resolved_before]
        required: false
        schema:
          format: int64
          nullable: false
          type: integer
        style: form
      - description: Scope incidents to resolved after epoch timestamp.
        explode: true
        in: query
        name: filter[resolved_after]
        required: false
        schema:
          format: int64
          nullable: false
          type: integer
        style: form
      - description: Scope incidents to customer impacted status.
        explode: true
        in: query
        name: filter[customer_impacted]
        required: false
        schema:
          nullable: false
          type: boolean
        style: form
      - description: Scope incidents to state of incident.
        explode: true
        in: query
        name: filter[state]
        required: false
        schema:
          nullable: false
          type: string
        style: form
      - description: Scope incidents to created by uuid.
        explode: true
        in: query
        name: filter[created_by_uuid]
        required: false
        schema:
          nullable: false
          type: string
        style: form
      - description: Scope incidents to created by handle.
        explode: true
        in: query
        name: filter[created_by_handle]
        required: false
        schema:
          nullable: false
          type: string
        style: form
      - description: Scope incidents to created by email.
        explode: true
        in: query
        name: filter[created_by_email]
        required: false
        schema:
          format: email
          nullable: false
          type: string
        style: form
      - description: Scope incidents to created by name.
        explode: true
        in: query
        name: filter[created_by_name]
        required: false
        schema:
          nullable: false
          type: string
        style: form
      - description: Scope incidents to last modified by uuid.
        explode: true
        in: query
        name: filter[last_modified_by_uuid]
        required: false
        schema:
          nullable: false
          type: string
        style: form
      - description: Scope incidents to last modified by handle.
        explode: true
        in: query
        name: filter[last_modified_by_handle]
        required: false
        schema:
          nullable: false
          type: string
        style: form
      - description: Scope incidents to last modified by email.
        explode: true
        in: query
        name: filter[last_modified_by_email]
        required: false
        schema:
          format: email
          nullable: false
          type: string
        style: form
      - description: Scope incidents to last modified by name.
        explode: true
        in: query
        name: filter[last_modified_by_name]
        required: false
        schema:
          nullable: false
          type: string
        style: form
      - description: Scope incidents to commander by uuid.
        explode: true
        in: query
        name: filter[commander_uuid]
        required: false
        schema:
          nullable: false
          type: string
        style: form
      - description: Scope incidents to commander by handle.
        explode: true
        in: query
        name: filter[commander_handle]
        required: false
        schema:
          nullable: false
          type: string
        style: form
      - description: Scope incidents to commander by email.
        explode: true
        in: query
        name: filter[commander_email]
        required: false
        schema:
          format: email
          nullable: false
          type: string
        style: form
      - description: Scope incidents to commander by name.
        explode: true
        in: query
        name: filter[commander_name]
        required: false
        schema:
          nullable: false
          type: string
        style: form
      - description: Scope incidents with the following postmortem id.
        explode: true
        in: query
        name: filter[postmortem_id]
        required: false
        schema:
          format: int64
          nullable: false
          type: integer
        style: form
      - description: Scope incidents with the following incident id.
        explode: true
        in: query
        name: filter[incident_id]
        required: false
        schema:
          format: int64
          nullable: false
          type: integer
        style: form
      - description: Scope incidents with the following public incident id.
        explode: true
        in: query
        name: filter[public_id]
        required: false
        schema:
          format: int64
          nullable: false
          type: integer
        style: form
      - description: Scope incidents which were impacted by the selected services.
          A CSV of service names.
        explode: true
        in: query
        name: filter[services]
        required: false
        schema:
          nullable: false
          type: string
        style: form
      - description: Scope incidents which were impacted by the selected teams. A
          CSV of team names.
        explode: true
        in: query
        name: filter[teams]
        required: false
        schema:
          nullable: false
          type: string
        style: form
      - description: Fuzzy text to use to search incident content.
        explode: true
        in: query
        name: filter[text]
        required: false
        schema:
          nullable: false
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncidentSearchPayload'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not Found
      summary: Search incidents
      tags:
      - Incidents
      x-unstable: true
  /api/v1/incidents/summary:
    get:
      description: Obtain top-level summary statistics for incidents.
      operationId: IncidentsSummary
      parameters:
      - description: Scope incidents to created before epoch timestamp.
        explode: true
        in: query
        name: filter[created_before]
        required: false
        schema:
          format: int64
          nullable: false
          type: integer
        style: form
      - description: Scope incidents to created after epoch timestamp.
        explode: true
        in: query
        name: filter[created_after]
        required: false
        schema:
          format: int64
          nullable: false
          type: integer
        style: form
      - description: Scope incidents to last modified before epoch timestamp.
        explode: true
        in: query
        name: filter[last_modified_before]
        required: false
        schema:
          format: int64
          nullable: false
          type: integer
        style: form
      - description: Scope incidents to last modified after epoch timestamp.
        explode: true
        in: query
        name: filter[last_modified_after]
        required: false
        schema:
          format: int64
          nullable: false
          type: integer
        style: form
      - description: Scope incidents to deleted before epoch timestamp.
        explode: true
        in: query
        name: filter[deleted_before]
        required: false
        schema:
          format: int64
          nullable: false
          type: integer
        style: form
      - description: Scope incidents to deleted after epoch timestamp.
        explode: true
        in: query
        name: filter[deleted_after]
        required: false
        schema:
          format: int64
          nullable: false
          type: integer
        style: form
      - description: Scope incidents to deleted resolved epoch timestamp.
        explode: true
        in: query
        name: filter[resolved_before]
        required: false
        schema:
          format: int64
          nullable: false
          type: integer
        style: form
      - description: Scope incidents to resolved after epoch timestamp.
        explode: true
        in: query
        name: filter[resolved_after]
        required: false
        schema:
          format: int64
          nullable: false
          type: integer
        style: form
      - description: Scope incidents which were impacted by the selected services.
          A CSV of service names.
        explode: true
        in: query
        name: filter[services]
        required: false
        schema:
          nullable: false
          type: string
        style: form
      - description: Scope incidents which were impacted by the selected teams. A
          CSV of team names.
        explode: true
        in: query
        name: filter[teams]
        required: false
        schema:
          nullable: false
          type: string
        style: form
      - description: Fuzzy text to use to search incident content.
        explode: true
        in: query
        name: filter[text]
        required: false
        schema:
          nullable: false
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncidentSummaryPayload'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not Found
      summary: Incidents Summary
      tags:
      - Incidents
      x-unstable: true
  /api/v1/incidents/{incident_id}:
    delete:
      description: Deletes an existing incident from the users organization.
      operationId: DeleteIncident
      parameters:
      - description: The ID(`incident_id`) of the incident.
        explode: false
        in: path
        name: incident_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: DELETED
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not Found
      summary: Delete an existing incident
      tags:
      - Incidents
      x-unstable: true
    get:
      description: Get the details of an incident by `incident_id` or `public_id`.
        If querying by `public_id`, set the `is_public_id` query param to `true`.
      operationId: GetIncident
      parameters:
      - description: The ID(`incident_id`) of the incident.
        explode: false
        in: path
        name: incident_id
        required: true
        schema:
          type: string
        style: simple
      - description: Set `true` if provided `incident_id` is a `public_id`.
        explode: true
        in: query
        name: is_public_id
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncidentPayload'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not Found
      summary: Get the details of an incident
      tags:
      - Incidents
      x-unstable: true
    patch:
      description: Updates an existing incident. Only provide the attributes which
        should be updated as this request is a partial update.
      operationId: PatchIncident
      parameters:
      - description: The ID(`incident_id`) of the incident.
        explode: false
        in: path
        name: incident_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IncidentPayload'
        description: Incident Payload.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncidentPayload'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not Found
      summary: Update an existing incident
      tags:
      - Incidents
      x-codegen-request-body-name: body
      x-unstable: true
  /api/v1/incidents/{incident_id}/relationships/postmortems:
    get:
      description: Get all postmortems for a given incident. Note that there should
        only ever be 0 or 1 postmortems for a given incident.
      operationId: GetIncidentPostmortems
      parameters:
      - description: The ID(`incident_id`) of the incident.
        explode: false
        in: path
        name: incident_id
        required: true
        schema:
          type: string
        style: simple
      - description: Include user data in api response.
        explode: true
        in: query
        name: with_users
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: maximum number of incidents to return.
        explode: true
        in: query
        name: page[limit]
        required: false
        schema:
          default: 1000
          format: int64
          type: integer
        style: form
      - description: index of the first element for the query.
        explode: true
        in: query
        name: page[offset]
        required: false
        schema:
          default: 0
          format: int64
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncidentPostmortemListPayload'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
      summary: Get a list of all Postmortems
      tags:
      - Incidents
      x-unstable: true
    post:
      description: Creates a new postmortem for the given incident.
      operationId: CreateIncidentPostmortem
      parameters:
      - description: The ID(`incident_id`) of the incident.
        explode: false
        in: path
        name: incident_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IncidentPostmortemPayload'
        description: Incident Postmortem Payload.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncidentPostmortemPayload'
          description: CREATED
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not Found
      summary: Create a new postmortem
      tags:
      - Incidents
      x-codegen-request-body-name: body
      x-unstable: true
  /api/v1/incidents/{incident_id}/relationships/postmortems/{postmortem_id}:
    delete:
      description: Deletes an existing postmortem for the given incident.
      operationId: DeleteIncidentPostmortem
      parameters:
      - description: The ID(`incident_id`) of the incident.
        explode: false
        in: path
        name: incident_id
        required: true
        schema:
          type: string
        style: simple
      - description: The ID of the postmortem.
        explode: false
        in: path
        name: postmortem_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: DELETED
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not Found
      summary: Update an existing postmortem
      tags:
      - Incidents
      x-unstable: true
    get:
      description: Get details of a postmortem for the given incident.
      operationId: GetIncidentPostmortem
      parameters:
      - description: The ID(`incident_id`) of the incident.
        explode: false
        in: path
        name: incident_id
        required: true
        schema:
          type: string
        style: simple
      - description: The ID of the postmortem.
        explode: false
        in: path
        name: postmortem_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncidentPostmortemPayload'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not Found
      summary: Get details of a postmortem
      tags:
      - Incidents
      x-unstable: true
    patch:
      description: Updates an existing postmortem. Only provide the attributes which
        should be updated as this request is a partial update.
      operationId: PatchIncidentPostmortem
      parameters:
      - description: The ID(`incident_id`) of the incident.
        explode: false
        in: path
        name: incident_id
        required: true
        schema:
          type: string
        style: simple
      - description: The ID of the postmortem.
        explode: false
        in: path
        name: postmortem_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IncidentPostmortemPayload'
        description: Incident Postmortem Payload.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncidentPostmortemPayload'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not Found
      summary: Update an existing postmortem
      tags:
      - Incidents
      x-codegen-request-body-name: body
      x-unstable: true
  /api/v1/incidents/{incident_id}/relationships/selections:
    get:
      description: Get all selections for a given incident.
      operationId: GetIncidentSelections
      parameters:
      - description: The ID(`incident_id`) of the incident.
        explode: false
        in: path
        name: incident_id
        required: true
        schema:
          type: string
        style: simple
      - description: Include user data in api response.
        explode: true
        in: query
        name: with_users
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: maximum number of incidents to return.
        explode: true
        in: query
        name: page[limit]
        required: false
        schema:
          default: 1000
          format: int64
          type: integer
        style: form
      - description: index of the first element for the query.
        explode: true
        in: query
        name: page[offset]
        required: false
        schema:
          default: 0
          format: int64
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncidentSelectionListPayload'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
      summary: Get all selections for the given incident
      tags:
      - Incidents
      x-unstable: true
    post:
      description: Creates a new selection for the given incident.
      operationId: CreateIncidentSelection
      parameters:
      - description: The ID(`incident_id`) of the incident.
        explode: false
        in: path
        name: incident_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IncidentSelectionPayload'
        description: Incident Selection Payload.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncidentSelectionPayload'
          description: CREATED
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not Found
      summary: Create a new selection
      tags:
      - Incidents
      x-codegen-request-body-name: body
      x-unstable: true
  /api/v1/incidents/{incident_id}/relationships/selections/{selection_id}:
    delete:
      description: Deletes an existing selection for the given incident.
      operationId: DeleteIncidentSelection
      parameters:
      - description: The ID(`incident_id`) of the incident.
        explode: false
        in: path
        name: incident_id
        required: true
        schema:
          type: string
        style: simple
      - description: The ID of the incident field selection.
        explode: false
        in: path
        name: selection_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: DELETED
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not Found
      summary: Deletes an existing selection
      tags:
      - Incidents
      x-unstable: true
    patch:
      description: Updates an existing selection. Only the choice field can be updated
        for a given selection.
      operationId: PatchIncidentSelection
      parameters:
      - description: The ID(`incident_id`) of the incident.
        explode: false
        in: path
        name: incident_id
        required: true
        schema:
          type: string
        style: simple
      - description: The ID of the incident field selection.
        explode: false
        in: path
        name: selection_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IncidentSelectionPayload'
        description: Incident Selection Payload.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncidentSelectionPayload'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not Found
      summary: Update an existing selection
      tags:
      - Incidents
      x-codegen-request-body-name: body
      x-unstable: true
  /api/v1/incidents/{incident_id}/relationships/services:
    get:
      description: Get all services associated with a given incident.
      operationId: GetServicesForIncident
      parameters:
      - description: The ID(`incident_id`) of the incident.
        explode: false
        in: path
        name: incident_id
        required: true
        schema:
          type: string
        style: simple
      - description: Include user data in api response.
        explode: true
        in: query
        name: with_users
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: maximum number of incidents to return.
        explode: true
        in: query
        name: page[limit]
        required: false
        schema:
          default: 1000
          format: int64
          type: integer
        style: form
      - description: index of the first element for the query.
        explode: true
        in: query
        name: page[offset]
        required: false
        schema:
          default: 0
          format: int64
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceListPayload'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
      summary: Get all services for the given incident
      tags:
      - Incidents
      x-unstable: true
    post:
      description: Add a service to a given incident.
      operationId: AddServiceToIncident
      parameters:
      - description: The ID(`incident_id`) of the incident.
        explode: false
        in: path
        name: incident_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServicePayload'
        description: Services Payload.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceListPayload'
          description: CREATED
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not Found
      summary: Add a new service to an incident
      tags:
      - Incidents
      x-codegen-request-body-name: body
      x-unstable: true
  /api/v1/incidents/{incident_id}/relationships/services/{service_id}:
    delete:
      description: Remove a service from an incident.
      operationId: RemoveServiceFromIncident
      parameters:
      - description: The ID(`incident_id`) of the incident.
        explode: false
        in: path
        name: incident_id
        required: true
        schema:
          type: string
        style: simple
      - description: The ID of the service.
        explode: false
        in: path
        name: service_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: DELETED
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not Found
      summary: Remove a service from an incident
      tags:
      - Incidents
      x-unstable: true
  /api/v1/incidents/{incident_id}/relationships/teams:
    get:
      description: Get all teams associated with a given incident.
      operationId: GetTeamsForIncident
      parameters:
      - description: The ID(`incident_id`) of the incident.
        explode: false
        in: path
        name: incident_id
        required: true
        schema:
          type: string
        style: simple
      - description: Include user data in api response.
        explode: true
        in: query
        name: with_users
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: maximum number of incidents to return.
        explode: true
        in: query
        name: page[limit]
        required: false
        schema:
          default: 1000
          format: int64
          type: integer
        style: form
      - description: index of the first element for the query.
        explode: true
        in: query
        name: page[offset]
        required: false
        schema:
          default: 0
          format: int64
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamListPayload'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
      summary: Get all teams for the given incident
      tags:
      - Incidents
      x-unstable: true
    post:
      description: Add a team to a given incident.
      operationId: AddTeamToIncident
      parameters:
      - description: The ID(`incident_id`) of the incident.
        explode: false
        in: path
        name: incident_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamPayload'
        description: Teams Payload.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamListPayload'
          description: CREATED
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not Found
      summary: Add a new team to an incident
      tags:
      - Incidents
      x-codegen-request-body-name: body
      x-unstable: true
  /api/v1/incidents/{incident_id}/relationships/teams/{team_id}:
    delete:
      description: Remove a team from an incident.
      operationId: RemoveTeamFromIncident
      parameters:
      - description: The ID(`incident_id`) of the incident.
        explode: false
        in: path
        name: incident_id
        required: true
        schema:
          type: string
        style: simple
      - description: The ID of the team.
        explode: false
        in: path
        name: team_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: DELETED
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not Found
      summary: Remove a team from an incident
      tags:
      - Incidents
      x-unstable: true
  /api/v1/incidents/{incident_id}/relationships/todos:
    get:
      description: Get all todos for a given incident.
      operationId: GetIncidentTodos
      parameters:
      - description: The ID(`incident_id`) of the incident.
        explode: false
        in: path
        name: incident_id
        required: true
        schema:
          type: string
        style: simple
      - description: Include user data in api response.
        explode: true
        in: query
        name: with_users
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: maximum number of incidents to return.
        explode: true
        in: query
        name: page[limit]
        required: false
        schema:
          default: 1000
          format: int64
          type: integer
        style: form
      - description: index of the first element for the query.
        explode: true
        in: query
        name: page[offset]
        required: false
        schema:
          default: 0
          format: int64
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncidentTodoListPayload'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
      summary: Get all todos for the given incident
      tags:
      - Incidents
      x-unstable: true
    post:
      description: Creates a new todo for the given incident.
      operationId: CreateIncidentTodo
      parameters:
      - description: The ID(`incident_id`) of the incident.
        explode: false
        in: path
        name: incident_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IncidentTodoPayload'
        description: Incident Todo Payload.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncidentTodoPayload'
          description: CREATED
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not Found
      summary: Create a new todo
      tags:
      - Incidents
      x-codegen-request-body-name: body
      x-unstable: true
  /api/v1/incidents/{incident_id}/relationships/todos/{todo_id}:
    delete:
      description: Deletes an existing todo for the given incident.
      operationId: DeleteIncidentTodo
      parameters:
      - description: The ID(`incident_id`) of the incident.
        explode: false
        in: path
        name: incident_id
        required: true
        schema:
          type: string
        style: simple
      - description: The ID of the incident todo.
        explode: false
        in: path
        name: todo_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: DELETED
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not Found
      summary: Deletes an existing todo for the given incident
      tags:
      - Incidents
      x-unstable: true
    get:
      description: Get the details of an incident todo.
      operationId: GetIncidentTodo
      parameters:
      - description: The ID(`incident_id`) of the incident.
        explode: false
        in: path
        name: incident_id
        required: true
        schema:
          type: string
        style: simple
      - description: The ID of the incident todo.
        explode: false
        in: path
        name: todo_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncidentTodoPayload'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not Found
      summary: Get the details of an incident todo
      tags:
      - Incidents
      x-unstable: true
    patch:
      description: Updates an existing todo. Only provide the attributes which should
        be updated as this request is a partial update.
      operationId: PatchIncidentTodo
      parameters:
      - description: The ID(`incident_id`) of the incident.
        explode: false
        in: path
        name: incident_id
        required: true
        schema:
          type: string
        style: simple
      - description: The ID of the incident todo.
        explode: false
        in: path
        name: todo_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IncidentTodoPayload'
        description: Incident Todo Payload.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncidentTodoPayload'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not Found
      summary: Update an existing todo
      tags:
      - Incidents
      x-codegen-request-body-name: body
      x-unstable: true
  /api/v1/services:
    get:
      description: Get all services for a given organization. If the `with_users`
        query parameter is not set, the included attribute and associated user relationships
        will not be returned.
      operationId: GetServices
      parameters:
      - description: Include user data in api response.
        explode: true
        in: query
        name: with_users
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: maximum number of incidents to return.
        explode: true
        in: query
        name: page[limit]
        required: false
        schema:
          default: 1000
          format: int64
          type: integer
        style: form
      - description: index of the first element for the query.
        explode: true
        in: query
        name: page[offset]
        required: false
        schema:
          default: 0
          format: int64
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceListPayload'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
      summary: Get a list of all services
      tags:
      - Services
      x-unstable: true
    post:
      description: Creates a new service.
      operationId: CreateService
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServicePayload'
        description: Service Payload.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServicePayload'
          description: CREATED
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not Found
      summary: Create a new service
      tags:
      - Services
      x-codegen-request-body-name: body
      x-unstable: true
  /api/v1/services/{service_id}:
    delete:
      description: Deletes an existing service.
      operationId: DeleteService
      parameters:
      - description: The ID of the service.
        explode: false
        in: path
        name: service_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: DELETED
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not Found
      summary: Delete an existing service
      tags:
      - Services
      x-unstable: true
    get:
      description: Get details of a service.
      operationId: GetService
      parameters:
      - description: The ID of the service.
        explode: false
        in: path
        name: service_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServicePayload'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not Found
      summary: Get details of a service
      tags:
      - Services
      x-unstable: true
    patch:
      description: Updates an existing service. Only provide the attributes which
        should be updated as this request is a partial update.
      operationId: PatchService
      parameters:
      - description: The ID of the service.
        explode: false
        in: path
        name: service_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServicePayload'
        description: Service Payload.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServicePayload'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not Found
      summary: Update an existing service
      tags:
      - Services
      x-codegen-request-body-name: body
      x-unstable: true
  /api/v1/teams:
    get:
      description: Get all teams for a given organization. If the `with_users` query
        parameter is not set, the included attribute and associated user relationships
        will not be returned.
      operationId: GetTeams
      parameters:
      - description: Include user data in api response.
        explode: true
        in: query
        name: with_users
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: maximum number of incidents to return.
        explode: true
        in: query
        name: page[limit]
        required: false
        schema:
          default: 1000
          format: int64
          type: integer
        style: form
      - description: index of the first element for the query.
        explode: true
        in: query
        name: page[offset]
        required: false
        schema:
          default: 0
          format: int64
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamListPayload'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
      summary: Get a list of all teams
      tags:
      - Teams
      x-unstable: true
    post:
      description: Creates a new team.
      operationId: CreateTeam
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamPayload'
        description: Teams Payload.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamPayload'
          description: CREATED
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not Found
      summary: Create a new team
      tags:
      - Teams
      x-codegen-request-body-name: body
      x-unstable: true
  /api/v1/teams/{team_id}:
    delete:
      description: Deletes an existing team.
      operationId: DeleteTeam
      parameters:
      - description: The ID of the team.
        explode: false
        in: path
        name: team_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: DELETED
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not Found
      summary: Delete an existing team
      tags:
      - Teams
      x-unstable: true
    get:
      description: Get details of a team.
      operationId: GetTeam
      parameters:
      - description: The ID of the team.
        explode: false
        in: path
        name: team_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamPayload'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not Found
      summary: Get details of a team
      tags:
      - Teams
      x-unstable: true
    patch:
      description: Updates an existing team. Only provide the attributes which should
        be updated as this request is a partial update.
      operationId: PatchTeam
      parameters:
      - description: The ID of the team.
        explode: false
        in: path
        name: team_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamPayload'
        description: Teams Payload.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamPayload'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not Found
      summary: Update an existing team
      tags:
      - Teams
      x-codegen-request-body-name: body
      x-unstable: true
  /api/v2/dashboard/lists/manual/{dashboard_list_id}/dashboards:
    delete:
      description: Delete dashboards from an existing dashboard list.
      operationId: DeleteDashboardListItems
      parameters:
      - description: ID of the dashboard list to delete items from.
        explode: false
        in: path
        name: dashboard_list_id
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DashboardListItems'
        description: Dashboards to delete from the dashboard list.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardListDeleteItemsResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not Found
      summary: Delete items from a dashboard list
      tags:
      - DashboardLists
      x-codegen-request-body-name: body
    get:
      description: Fetch the dashboard list’s dashboard definitions.
      operationId: GetDashboardListItems
      parameters:
      - description: ID of the dashboard list to get items from.
        explode: false
        in: path
        name: dashboard_list_id
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardListItems'
          description: OK
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not Found
      summary: Get a Dashboard List
      tags:
      - DashboardLists
    post:
      description: Add dashboards to an existing dashboard list.
      operationId: AddDashboardListItems
      parameters:
      - description: ID of the dashboard list to add items to.
        explode: false
        in: path
        name: dashboard_list_id
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DashboardListItems'
        description: Dashboards to add to the dashboard list.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardListAddItemsResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not Found
      summary: Add Items to a Dashboard List
      tags:
      - DashboardLists
      x-codegen-request-body-name: body
    put:
      description: Update dashboards of an existing dashboard list.
      operationId: UpdateDashboardListItems
      parameters:
      - description: ID of the dashboard list to update items from.
        explode: false
        in: path
        name: dashboard_list_id
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DashboardListItems'
        description: New dashboards of the dashboard list.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardListItems'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not Found
      summary: Update items of a dashboard list
      tags:
      - DashboardLists
      x-codegen-request-body-name: body
  /api/v2/user_invitations:
    post:
      description: Sends emails to one or more users inviting them to join the organization.
      operationId: SendInvitations
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInvitationPayload'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInvitationsResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
      summary: Send invitation emails
      tags:
      - Users
      x-codegen-request-body-name: body
  /api/v2/user_invitations/{user_invitation_uuid}:
    get:
      description: Returns a single user invitation by its UUID.
      operationId: GetInvitation
      parameters:
      - description: The UUID of the user invitation.
        explode: false
        in: path
        name: user_invitation_uuid
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInvitationResponse'
          description: OK
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not found
      summary: Get a user invitation
      tags:
      - Users
      x-codegen-request-body-name: body
  /api/v2/users:
    get:
      description: Get the list of all users in the organization. This list includes
        all users even if they are disabled or unverified.
      operationId: ListUsers
      parameters:
      - description: Number of users to return for a given page.
        explode: true
        in: query
        name: page[size]
        required: false
        schema:
          default: 10
          format: int64
          type: integer
        style: form
      - description: Specific page number to return.
        explode: true
        in: query
        name: page[number]
        required: false
        schema:
          default: 0
          format: int64
          type: integer
        style: form
      - description: 'User attribute to order results by. Sort order is ascending
          by default. Sort order is descending if the field is prefixed by a negative
          sign, for example `sort=-name`. Options: `name`, `modified_at`, `user_count`.'
        explode: true
        in: query
        name: sort
        required: false
        schema:
          default: name
          type: string
        style: form
      - description: 'Direction of sort. Options: `asc`, `desc`.'
        explode: true
        in: query
        name: sort_dir
        required: false
        schema:
          $ref: '#/components/schemas/QuerySortOrder'
        style: form
      - description: Filter all users by the given string. Defaults to no filtering.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: 'Filter on status attribute. Comma separated list: Active, Pending,
          and Disabled. Defaults to no filtering.'
        explode: true
        in: query
        name: filter[status]
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersResponsePayload'
          description: OK
        "400":
          content:
            applcation/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        "403":
          content:
            applcation/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
      summary: List all users
      tags:
      - Users
      x-codegen-request-body-name: body
    post:
      description: Create a user for your organization.
      operationId: CreateUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreatePayload'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponsePayload'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
      summary: Create user
      tags:
      - Users
      x-codegen-request-body-name: body
  /api/v2/users/{user_id}:
    delete:
      description: Disable user. Can only be used with an application key belonging
        to an administrator user.
      operationId: DisableUser
      parameters:
      - description: The ID of the user.
        explode: false
        in: path
        name: user_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: OK
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not found
      summary: Disable user
      tags:
      - Users
      x-codegen-request-body-name: body
    get:
      description: Get a user in the organization specified by the user’s `user_id`.
      operationId: GetUser
      parameters:
      - description: The ID of the user.
        explode: false
        in: path
        name: user_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponsePayload'
          description: OK for get user
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not found
      summary: Get a user
      tags:
      - Users
      x-codegen-request-body-name: body
    patch:
      description: Edit a user. Can only be used with an application key belonging
        to an administrator user.
      operationId: UpdateUser
      parameters:
      - description: The ID of the user.
        explode: false
        in: path
        name: user_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdatePayload'
      responses:
        "204":
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not found
      summary: Update a user
      tags:
      - Users
      x-codegen-request-body-name: body
  /api/v2/users/{user_id}/orgs:
    get:
      description: Get a user organization. Returns the user information and all organizations
        joined by this user.
      operationId: GetUserOrganization
      parameters:
      - description: The ID of the user.
        explode: false
        in: path
        name: user_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponsePayload'
          description: OK
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not found
      summary: Get a user organization
      tags:
      - Users
      x-codegen-request-body-name: body
  /api/v2/users/{user_id}/permissions:
    get:
      description: Get a user permission set. Returns a list of the user’s permissions
        granted by the associated user's roles.
      operationId: GetUserPermissions
      parameters:
      - description: The ID of the user.
        explode: false
        in: path
        name: user_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Permissions'
          description: OK
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not found
      summary: Get a user permissions
      tags:
      - Users
      x-codegen-request-body-name: body
components:
  callbacks: {}
  examples: {}
  headers: {}
  links: {}
  parameters:
    CommanderEmailAfterIncidentSearchQueryParameter:
      description: Scope incidents to commander by email.
      explode: true
      in: query
      name: filter[commander_email]
      required: false
      schema:
        format: email
        nullable: false
        type: string
      style: form
    CommanderHandleAfterIncidentSearchQueryParameter:
      description: Scope incidents to commander by handle.
      explode: true
      in: query
      name: filter[commander_handle]
      required: false
      schema:
        nullable: false
        type: string
      style: form
    CommanderNameAfterIncidentSearchQueryParameter:
      description: Scope incidents to commander by name.
      explode: true
      in: query
      name: filter[commander_name]
      required: false
      schema:
        nullable: false
        type: string
      style: form
    CommanderUUIDAfterIncidentSearchQueryParameter:
      description: Scope incidents to commander by uuid.
      explode: true
      in: query
      name: filter[commander_uuid]
      required: false
      schema:
        nullable: false
        type: string
      style: form
    CreatedAfterIncidentSearchQueryParameter:
      description: Scope incidents to created after epoch timestamp.
      explode: true
      in: query
      name: filter[created_after]
      required: false
      schema:
        format: int64
        nullable: false
        type: integer
      style: form
    CreatedBeforeIncidentSearchQueryParameter:
      description: Scope incidents to created before epoch timestamp.
      explode: true
      in: query
      name: filter[created_before]
      required: false
      schema:
        format: int64
        nullable: false
        type: integer
      style: form
    CreatedByEmailAfterIncidentSearchQueryParameter:
      description: Scope incidents to created by email.
      explode: true
      in: query
      name: filter[created_by_email]
      required: false
      schema:
        format: email
        nullable: false
        type: string
      style: form
    CreatedByHandleAfterIncidentSearchQueryParameter:
      description: Scope incidents to created by handle.
      explode: true
      in: query
      name: filter[created_by_handle]
      required: false
      schema:
        nullable: false
        type: string
      style: form
    CreatedByNameAfterIncidentSearchQueryParameter:
      description: Scope incidents to created by name.
      explode: true
      in: query
      name: filter[created_by_name]
      required: false
      schema:
        nullable: false
        type: string
      style: form
    CreatedByUUIDAfterIncidentSearchQueryParameter:
      description: Scope incidents to created by uuid.
      explode: true
      in: query
      name: filter[created_by_uuid]
      required: false
      schema:
        nullable: false
        type: string
      style: form
    CustomerImpactedIncidentSearchQueryParameter:
      description: Scope incidents to customer impacted status.
      explode: true
      in: query
      name: filter[customer_impacted]
      required: false
      schema:
        nullable: false
        type: boolean
      style: form
    DeletedAfterIncidentSearchQueryParameter:
      description: Scope incidents to deleted after epoch timestamp.
      explode: true
      in: query
      name: filter[deleted_after]
      required: false
      schema:
        format: int64
        nullable: false
        type: integer
      style: form
    DeletedBeforeIncidentSearchQueryParameter:
      description: Scope incidents to deleted before epoch timestamp.
      explode: true
      in: query
      name: filter[deleted_before]
      required: false
      schema:
        format: int64
        nullable: false
        type: integer
      style: form
    IncidentConfigFieldChoiceIDPathParameter:
      description: The ID of the incident field choice.
      explode: false
      in: path
      name: choice_id
      required: true
      schema:
        type: string
      style: simple
    IncidentConfigFieldIDPathParameter:
      description: The ID of the incident field.
      explode: false
      in: path
      name: field_id
      required: true
      schema:
        type: string
      style: simple
    IncidentIDPathParameter:
      description: The ID(`incident_id`) of the incident.
      explode: false
      in: path
      name: incident_id
      required: true
      schema:
        type: string
      style: simple
    IncidentIdIncidentSearchQueryParameter:
      description: Scope incidents with the following incident id.
      explode: true
      in: query
      name: filter[incident_id]
      required: false
      schema:
        format: int64
        nullable: false
        type: integer
      style: form
    IncidentPostmortemIDPathParameter:
      description: The ID of the postmortem.
      explode: false
      in: path
      name: postmortem_id
      required: true
      schema:
        type: string
      style: simple
    IncidentSelectionIDPathParameter:
      description: The ID of the incident field selection.
      explode: false
      in: path
      name: selection_id
      required: true
      schema:
        type: string
      style: simple
    IncidentTimelineCellIDPathParameter:
      description: The ID of the timeline cell.
      explode: false
      in: path
      name: cell_id
      required: true
      schema:
        type: string
      style: simple
    IncidentTodoIDPathParameter:
      description: The ID of the incident todo.
      explode: false
      in: path
      name: todo_id
      required: true
      schema:
        type: string
      style: simple
    LastModifiedAfterIncidentSearchQueryParameter:
      description: Scope incidents to last modified after epoch timestamp.
      explode: true
      in: query
      name: filter[last_modified_after]
      required: false
      schema:
        format: int64
        nullable: false
        type: integer
      style: form
    LastModifiedBeforeIncidentSearchQueryParameter:
      description: Scope incidents to last modified before epoch timestamp.
      explode: true
      in: query
      name: filter[last_modified_before]
      required: false
      schema:
        format: int64
        nullable: false
        type: integer
      style: form
    LastModifiedByEmailAfterIncidentSearchQueryParameter:
      description: Scope incidents to last modified by email.
      explode: true
      in: query
      name: filter[last_modified_by_email]
      required: false
      schema:
        format: email
        nullable: false
        type: string
      style: form
    LastModifiedByHandleAfterIncidentSearchQueryParameter:
      description: Scope incidents to last modified by handle.
      explode: true
      in: query
      name: filter[last_modified_by_handle]
      required: false
      schema:
        nullable: false
        type: string
      style: form
    LastModifiedByNameAfterIncidentSearchQueryParameter:
      description: Scope incidents to last modified by name.
      explode: true
      in: query
      name: filter[last_modified_by_name]
      required: false
      schema:
        nullable: false
        type: string
      style: form
    LastModifiedByUUIDAfterIncidentSearchQueryParameter:
      description: Scope incidents to last modified by uuid.
      explode: true
      in: query
      name: filter[last_modified_by_uuid]
      required: false
      schema:
        nullable: false
        type: string
      style: form
    PageLimitQueryParameter:
      description: maximum number of incidents to return.
      explode: true
      in: query
      name: page[limit]
      required: false
      schema:
        default: 1000
        format: int64
        type: integer
      style: form
    PageNumber:
      description: Specific page number to return.
      explode: true
      in: query
      name: page[number]
      required: false
      schema:
        default: 0
        format: int64
        type: integer
      style: form
    PageOffsetQueryParameter:
      description: index of the first element for the query.
      explode: true
      in: query
      name: page[offset]
      required: false
      schema:
        default: 0
        format: int64
        type: integer
      style: form
    PageSize:
      description: Number of users to return for a given page.
      explode: true
      in: query
      name: page[size]
      required: false
      schema:
        default: 10
        format: int64
        type: integer
      style: form
    PageSortFieldQueryParameter:
      description: Sort field to use.
      explode: true
      in: query
      name: page[sort_field]
      required: false
      schema:
        type: string
      style: form
    PageSortQueryParameter:
      description: Sort direction.
      explode: true
      in: query
      name: page[sort]
      required: false
      schema:
        default: asc
        enum:
        - asc
        - desc
        type: string
      style: form
    PostmortemIdIncidentSearchQueryParameter:
      description: Scope incidents with the following postmortem id.
      explode: true
      in: query
      name: filter[postmortem_id]
      required: false
      schema:
        format: int64
        nullable: false
        type: integer
      style: form
    PublicIdIncidentSearchQueryParameter:
      description: Scope incidents with the following public incident id.
      explode: true
      in: query
      name: filter[public_id]
      required: false
      schema:
        format: int64
        nullable: false
        type: integer
      style: form
    ResolvedAfterIncidentSearchQueryParameter:
      description: Scope incidents to resolved after epoch timestamp.
      explode: true
      in: query
      name: filter[resolved_after]
      required: false
      schema:
        format: int64
        nullable: false
        type: integer
      style: form
    ResolvedBeforeIncidentSearchQueryParameter:
      description: Scope incidents to deleted resolved epoch timestamp.
      explode: true
      in: query
      name: filter[resolved_before]
      required: false
      schema:
        format: int64
        nullable: false
        type: integer
      style: form
    ServiceIDPathParameter:
      description: The ID of the service.
      explode: false
      in: path
      name: service_id
      required: true
      schema:
        type: string
      style: simple
    ServicesIncidentSearchQueryParameter:
      description: Scope incidents which were impacted by the selected services. A
        CSV of service names.
      explode: true
      in: query
      name: filter[services]
      required: false
      schema:
        nullable: false
        type: string
      style: form
    StateIncidentSearchQueryParameter:
      description: Scope incidents to state of incident.
      explode: true
      in: query
      name: filter[state]
      required: false
      schema:
        nullable: false
        type: string
      style: form
    TeamIDPathParameter:
      description: The ID of the team.
      explode: false
      in: path
      name: team_id
      required: true
      schema:
        type: string
      style: simple
    TeamsIncidentSearchQueryParameter:
      description: Scope incidents which were impacted by the selected teams. A CSV
        of team names.
      explode: true
      in: query
      name: filter[teams]
      required: false
      schema:
        nullable: false
        type: string
      style: form
    TextIncidentSearchQueryParameter:
      description: Fuzzy text to use to search incident content.
      explode: true
      in: query
      name: filter[text]
      required: false
      schema:
        nullable: false
        type: string
      style: form
    UserID:
      description: The ID of the user.
      explode: false
      in: path
      name: user_id
      required: true
      schema:
        type: string
      style: simple
    WithUsersQueryParameter:
      description: Include user data in api response.
      explode: true
      in: query
      name: with_users
      required: false
      schema:
        default: false
        type: boolean
      style: form
  requestBodies: {}
  responses:
    "204DefaultResponse":
      description: DELETED
    "400DefaultResponse":
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/APIErrorResponse'
      description: Bad Request
    "401DefaultResponse":
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/APIErrorResponse'
      description: Authentication error
    "403DefaultResponse":
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/APIErrorResponse'
      description: Forbidden
    "404DefaultResponse":
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/APIErrorResponse'
      description: Not Found
  schemas:
    APIErrorResponse:
      description: API Error response.
      properties:
        errors:
          description: An array of error messages.
          items:
            description: The error message itself.
            example: Bad Request
            type: string
          type: array
      required:
      - errors
      type: object
    Creator:
      description: Creator of the object
      example:
        name: name
        handle: handle
        email: email
      properties:
        email:
          description: The User email
          type: string
        handle:
          description: The User handle.
          type: string
        name:
          description: The User name.
          type: string
      type: object
    DashboardListAddItemsResponse:
      description: TODO.
      example:
        added_dashboards_to_list:
        - is_favorite: true
          author:
            name: name
            handle: handle
            email: email
          created: 2000-01-23T04:56:07.000+00:00
          is_shared: true
          popularity: 0
          icon: icon
          modified: 2000-01-23T04:56:07.000+00:00
          is_read_only: true
          id: id
          title: title
          url: url
        - is_favorite: true
          author:
            name: name
            handle: handle
            email: email
          created: 2000-01-23T04:56:07.000+00:00
          is_shared: true
          popularity: 0
          icon: icon
          modified: 2000-01-23T04:56:07.000+00:00
          is_read_only: true
          id: id
          title: title
          url: url
      properties:
        added_dashboards_to_list:
          description: List of dashboards added to the dashboard list.
          items:
            $ref: '#/components/schemas/DashboardListItem'
          type: array
      type: object
    DashboardListDeleteItemsResponse:
      description: TODO.
      example:
        deleted_dashboards_from_list:
        - is_favorite: true
          author:
            name: name
            handle: handle
            email: email
          created: 2000-01-23T04:56:07.000+00:00
          is_shared: true
          popularity: 0
          icon: icon
          modified: 2000-01-23T04:56:07.000+00:00
          is_read_only: true
          id: id
          title: title
          url: url
        - is_favorite: true
          author:
            name: name
            handle: handle
            email: email
          created: 2000-01-23T04:56:07.000+00:00
          is_shared: true
          popularity: 0
          icon: icon
          modified: 2000-01-23T04:56:07.000+00:00
          is_read_only: true
          id: id
          title: title
          url: url
      properties:
        deleted_dashboards_from_list:
          description: List of dashboards deleted from the dashboard list.
          items:
            $ref: '#/components/schemas/DashboardListItem'
          type: array
      type: object
    DashboardListItem:
      description: TODO.
      example:
        is_favorite: true
        author:
          name: name
          handle: handle
          email: email
        created: 2000-01-23T04:56:07.000+00:00
        is_shared: true
        popularity: 0
        icon: icon
        modified: 2000-01-23T04:56:07.000+00:00
        is_read_only: true
        id: id
        title: title
        url: url
      properties:
        author:
          $ref: '#/components/schemas/Creator'
        created:
          description: Date of creation of the dashboard.
          format: date-time
          readOnly: true
          type: string
        icon:
          description: URL to the icon of the dashboard.
          readOnly: true
          type: string
        id:
          description: ID of the dashboard.
          type: string
        is_favorite:
          description: Whether or not the dashboard is in the favorites.
          readOnly: true
          type: boolean
        is_read_only:
          description: Whether or not the dashboard is read only.
          readOnly: true
          type: boolean
        is_shared:
          description: Whether the dashboard is publicly shared or not.
          readOnly: true
          type: boolean
        modified:
          description: Date of last edition of the dashboard.
          format: date-time
          readOnly: true
          type: string
        popularity:
          description: Popularity of the dashboard.
          format: int32
          maximum: 5
          readOnly: true
          type: integer
        title:
          description: Title of the dashboard.
          readOnly: true
          type: string
        type:
          $ref: '#/components/schemas/DashboardType'
        url:
          description: URL path to the dashboard.
          readOnly: true
          type: string
      required:
      - id
      - type
      type: object
    DashboardListItems:
      description: TODO.
      example:
        total: 6
        dashboards:
        - is_favorite: true
          author:
            name: name
            handle: handle
            email: email
          created: 2000-01-23T04:56:07.000+00:00
          is_shared: true
          popularity: 0
          icon: icon
          modified: 2000-01-23T04:56:07.000+00:00
          is_read_only: true
          id: id
          title: title
          url: url
        - is_favorite: true
          author:
            name: name
            handle: handle
            email: email
          created: 2000-01-23T04:56:07.000+00:00
          is_shared: true
          popularity: 0
          icon: icon
          modified: 2000-01-23T04:56:07.000+00:00
          is_read_only: true
          id: id
          title: title
          url: url
      properties:
        dashboards:
          description: List of dashboards in the dashboard list.
          items:
            $ref: '#/components/schemas/DashboardListItem'
          type: array
        total:
          description: Number of dashboards in the dashboard list.
          format: int64
          readOnly: true
          type: integer
      required:
      - dashboards
      type: object
    DashboardType:
      description: The type of the dashboard.
      enum:
      - custom_timeboard
      - custom_screenboard
      - integration_screenboard
      - integration_timeboard
      - host_timeboard
      type: string
      x-enum-varnames:
      - CUSTOM_TIMEBOARD
      - CUSTOM_SCREENBOARD
      - INTEGRATION_SCREENBOARD
      - INTEGRATION_TIMEBOARD
      - HOST_TIMEBOARD
    Incident:
      description: Represents an Incident Item.
      example:
        relationships:
          commander:
            data:
              id: 00000000-0000-0000-0000-000000000000
              type: users
          last_modified_by:
            data:
              id: 00000000-0000-0000-0000-000000000000
              type: users
          created_by:
            data:
              id: 00000000-0000-0000-0000-000000000000
              type: users
        attributes:
          time_to_repair: 5
          created: 2000-01-23T04:56:07.000+00:00
          time_to_internal_response: 5
          title: title
          public_id: 6
          time_to_detect: 1
          customer_impact_scope: customer_impact_scope
          duration: 0
          customer_impact_end: 2000-01-23T04:56:07.000+00:00
          customer_impact_start: 2000-01-23T04:56:07.000+00:00
          detected: 2000-01-23T04:56:07.000+00:00
          modified: 2000-01-23T04:56:07.000+00:00
          state: active
          customer_impacted: true
          resolved: 2000-01-23T04:56:07.000+00:00
        id: "1234"
        type: incidents
      properties:
        attributes:
          $ref: '#/components/schemas/Incident_attributes'
        id:
          description: The Incident ID.
          example: "1234"
          readOnly: true
          type: string
        relationships:
          $ref: '#/components/schemas/Incident_relationships'
        type:
          default: incidents
          description: JSONAPI Model Type
          example: incidents
          type: string
      type: object
    IncidentConfigField:
      description: Represents an Incident Config Field Item.
      example:
        relationships:
          last_modified_by:
            data:
              id: 00000000-0000-0000-0000-000000000000
              type: users
          created_by:
            data:
              id: 00000000-0000-0000-0000-000000000000
              type: users
        attributes:
          created: 2000-01-23T04:56:07.000+00:00
          name: state
          modified: 2000-01-23T04:56:07.000+00:00
          table_id: 0
          type: 1
          default_choice_id: "1234"
        id: "1234"
        type: field
      properties:
        attributes:
          $ref: '#/components/schemas/IncidentConfigField_attributes'
        id:
          description: Unique identifier that represents the Incident Config Field.
          example: "1234"
          type: string
        relationships:
          $ref: '#/components/schemas/IncidentConfigField_relationships'
        type:
          description: JSONAPI Model Type
          example: field
          type: string
      type: object
    IncidentConfigFieldChoice:
      description: Represents an Incident Config Field Choice Item.
      example:
        relationships:
          last_modified_by:
            data:
              id: 00000000-0000-0000-0000-000000000000
              type: users
          created_by:
            data:
              id: 00000000-0000-0000-0000-000000000000
              type: users
        attributes:
          created: 2000-01-23T04:56:07.000+00:00
          name: Active
          modified: 2000-01-23T04:56:07.000+00:00
          user_defined_field_id: "123"
          value: active
        id: "1234"
        type: choice
      properties:
        attributes:
          $ref: '#/components/schemas/IncidentConfigFieldChoice_attributes'
        id:
          description: Unique identifier that represents the Incident Config Field
            Choice
          example: "1234"
          type: string
        relationships:
          $ref: '#/components/schemas/IncidentConfigField_relationships'
        type:
          description: JSONAPI Model Type
          example: choice
          type: string
      type: object
    IncidentConfigFieldChoiceListPayload:
      description: Represents the JSON API Payload of a List of Incident Config Field
        Choice Items.
      example:
        data:
        - relationships:
            last_modified_by:
              data:
                id: 00000000-0000-0000-0000-000000000000
                type: users
            created_by:
              data:
                id: 00000000-0000-0000-0000-000000000000
                type: users
          attributes:
            created: 2000-01-23T04:56:07.000+00:00
            name: Active
            modified: 2000-01-23T04:56:07.000+00:00
            user_defined_field_id: "123"
            value: active
          id: "1234"
          type: choice
        - relationships:
            last_modified_by:
              data:
                id: 00000000-0000-0000-0000-000000000000
                type: users
            created_by:
              data:
                id: 00000000-0000-0000-0000-000000000000
                type: users
          attributes:
            created: 2000-01-23T04:56:07.000+00:00
            name: Active
            modified: 2000-01-23T04:56:07.000+00:00
            user_defined_field_id: "123"
            value: active
          id: "1234"
          type: choice
        meta:
          pagination:
            offset: 10
            limit: 1000
            next_offset: 1000
        included:
        - relationships:
            org:
              data:
                id: 00000000-0000-0000-0000-000000000000
                type: orgs
          attributes:
            icon: /path/to/matching/gravatar/icon
            name: test user
            verified: true
            disabled: false
            handle: test@datadoghq.com
            email: test@datadoghq.com
          id: 00000000-0000-0000-0000-000000000000
          type: users
        - relationships:
            org:
              data:
                id: 00000000-0000-0000-0000-000000000000
                type: orgs
          attributes:
            icon: /path/to/matching/gravatar/icon
            name: test user
            verified: true
            disabled: false
            handle: test@datadoghq.com
            email: test@datadoghq.com
          id: 00000000-0000-0000-0000-000000000000
          type: users
      properties:
        data:
          description: The Incident config field choices.
          items:
            $ref: '#/components/schemas/IncidentConfigFieldChoice'
          type: array
        included:
          description: The User relationships.
          items:
            $ref: '#/components/schemas/UserJSONAPIResponse'
          readOnly: true
          type: array
        meta:
          $ref: '#/components/schemas/QueryMetadata'
      required:
      - data
      type: object
    IncidentConfigFieldChoicePayload:
      description: Represents the JSON API Payload of an Incident Config Field Choice
        Item.
      example:
        data:
          relationships:
            last_modified_by:
              data:
                id: 00000000-0000-0000-0000-000000000000
                type: users
            created_by:
              data:
                id: 00000000-0000-0000-0000-000000000000
                type: users
          attributes:
            created: 2000-01-23T04:56:07.000+00:00
            name: Active
            modified: 2000-01-23T04:56:07.000+00:00
            user_defined_field_id: "123"
            value: active
          id: "1234"
          type: choice
        included:
        - relationships:
            org:
              data:
                id: 00000000-0000-0000-0000-000000000000
                type: orgs
          attributes:
            icon: /path/to/matching/gravatar/icon
            name: test user
            verified: true
            disabled: false
            handle: test@datadoghq.com
            email: test@datadoghq.com
          id: 00000000-0000-0000-0000-000000000000
          type: users
        - relationships:
            org:
              data:
                id: 00000000-0000-0000-0000-000000000000
                type: orgs
          attributes:
            icon: /path/to/matching/gravatar/icon
            name: test user
            verified: true
            disabled: false
            handle: test@datadoghq.com
            email: test@datadoghq.com
          id: 00000000-0000-0000-0000-000000000000
          type: users
      properties:
        data:
          $ref: '#/components/schemas/IncidentConfigFieldChoice'
        included:
          description: The User relationships.
          items:
            $ref: '#/components/schemas/UserJSONAPIResponse'
          readOnly: true
          type: array
      required:
      - data
      type: object
    IncidentConfigFieldListPayload:
      description: Represents the JSON API Payload of a List of Incident Config Field
        Items.
      example:
        data:
        - relationships:
            last_modified_by:
              data:
                id: 00000000-0000-0000-0000-000000000000
                type: users
            created_by:
              data:
                id: 00000000-0000-0000-0000-000000000000
                type: users
          attributes:
            created: 2000-01-23T04:56:07.000+00:00
            name: state
            modified: 2000-01-23T04:56:07.000+00:00
            table_id: 0
            type: 1
            default_choice_id: "1234"
          id: "1234"
          type: field
        - relationships:
            last_modified_by:
              data:
                id: 00000000-0000-0000-0000-000000000000
                type: users
            created_by:
              data:
                id: 00000000-0000-0000-0000-000000000000
                type: users
          attributes:
            created: 2000-01-23T04:56:07.000+00:00
            name: state
            modified: 2000-01-23T04:56:07.000+00:00
            table_id: 0
            type: 1
            default_choice_id: "1234"
          id: "1234"
          type: field
        meta:
          pagination:
            offset: 10
            limit: 1000
            next_offset: 1000
        included:
        - relationships:
            org:
              data:
                id: 00000000-0000-0000-0000-000000000000
                type: orgs
          attributes:
            icon: /path/to/matching/gravatar/icon
            name: test user
            verified: true
            disabled: false
            handle: test@datadoghq.com
            email: test@datadoghq.com
          id: 00000000-0000-0000-0000-000000000000
          type: users
        - relationships:
            org:
              data:
                id: 00000000-0000-0000-0000-000000000000
                type: orgs
          attributes:
            icon: /path/to/matching/gravatar/icon
            name: test user
            verified: true
            disabled: false
            handle: test@datadoghq.com
            email: test@datadoghq.com
          id: 00000000-0000-0000-0000-000000000000
          type: users
      properties:
        data:
          description: The Incident config fields.
          items:
            $ref: '#/components/schemas/IncidentConfigField'
          type: array
        included:
          description: The User relationships.
          items:
            $ref: '#/components/schemas/UserJSONAPIResponse'
          readOnly: true
          type: array
        meta:
          $ref: '#/components/schemas/QueryMetadata'
      required:
      - data
      type: object
    IncidentConfigFieldPayload:
      description: Represents the JSON API Payload of an Incident Config Field Item.
      example:
        data:
          relationships:
            last_modified_by:
              data:
                id: 00000000-0000-0000-0000-000000000000
                type: users
            created_by:
              data:
                id: 00000000-0000-0000-0000-000000000000
                type: users
          attributes:
            created: 2000-01-23T04:56:07.000+00:00
            name: state
            modified: 2000-01-23T04:56:07.000+00:00
            table_id: 0
            type: 1
            default_choice_id: "1234"
          id: "1234"
          type: field
        included:
        - relationships:
            org:
              data:
                id: 00000000-0000-0000-0000-000000000000
                type: orgs
          attributes:
            icon: /path/to/matching/gravatar/icon
            name: test user
            verified: true
            disabled: false
            handle: test@datadoghq.com
            email: test@datadoghq.com
          id: 00000000-0000-0000-0000-000000000000
          type: users
        - relationships:
            org:
              data:
                id: 00000000-0000-0000-0000-000000000000
                type: orgs
          attributes:
            icon: /path/to/matching/gravatar/icon
            name: test user
            verified: true
            disabled: false
            handle: test@datadoghq.com
            email: test@datadoghq.com
          id: 00000000-0000-0000-0000-000000000000
          type: users
      properties:
        data:
          $ref: '#/components/schemas/IncidentConfigField'
        included:
          description: The Incident config fields.
          items:
            $ref: '#/components/schemas/UserJSONAPIResponse'
          readOnly: true
          type: array
      required:
      - data
      type: object
    IncidentConfigFieldTable:
      description: ID representing the type of object for the field
      enum:
      - 0
      - 1
      example: 0
      format: int32
      type: integer
      x-enum-varnames:
      - INCIDENT
      - POSTMORTEM
    IncidentConfigFieldType:
      description: ID representing the type of field, such as dropdown or multiselect
      enum:
      - 1
      - 2
      example: 1
      format: int32
      type: integer
      x-enum-varnames:
      - DROPDOWN
      - MULTISELECT
    IncidentCreateWithInitialData:
      description: For creating incidents you can also pass initial data for signals
        and choice selections
      example:
        attributes:
          time_to_repair: 7
          created: 2000-01-23T04:56:07.000+00:00
          time_to_internal_response: 2
          initial_user_defined_field_choices:
          - field_id: 1
            choice_id: 6
          - field_id: 1
            choice_id: 6
          title: title
          public_id: 5
          time_to_detect: 5
          customer_impact_scope: customer_impact_scope
          duration: 0
          customer_impact_end: 2000-01-23T04:56:07.000+00:00
          customer_impact_start: 2000-01-23T04:56:07.000+00:00
          detected: 2000-01-23T04:56:07.000+00:00
          modified: 2000-01-23T04:56:07.000+00:00
          state: active
          initial_cells:
          - deleted: 2000-01-23T04:56:07.000+00:00
            created: 2000-01-23T04:56:07.000+00:00
            modified: 2000-01-23T04:56:07.000+00:00
            source: slack
            cell_type: cell_type
            display_time: 2000-01-23T04:56:07.000+00:00
            content: ""
          - deleted: 2000-01-23T04:56:07.000+00:00
            created: 2000-01-23T04:56:07.000+00:00
            modified: 2000-01-23T04:56:07.000+00:00
            source: slack
            cell_type: cell_type
            display_time: 2000-01-23T04:56:07.000+00:00
            content: ""
          customer_impacted: true
          resolved: 2000-01-23T04:56:07.000+00:00
      properties:
        attributes:
          $ref: '#/components/schemas/IncidentCreateWithInitialData_attributes'
      type: object
    IncidentCreateWithInitialDataPayload:
      description: Represents the JSON API Payload of an Incident Item.
      example:
        data:
          attributes:
            time_to_repair: 7
            created: 2000-01-23T04:56:07.000+00:00
            time_to_internal_response: 2
            initial_user_defined_field_choices:
            - field_id: 1
              choice_id: 6
            - field_id: 1
              choice_id: 6
            title: title
            public_id: 5
            time_to_detect: 5
            customer_impact_scope: customer_impact_scope
            duration: 0
            customer_impact_end: 2000-01-23T04:56:07.000+00:00
            customer_impact_start: 2000-01-23T04:56:07.000+00:00
            detected: 2000-01-23T04:56:07.000+00:00
            modified: 2000-01-23T04:56:07.000+00:00
            state: active
            initial_cells:
            - deleted: 2000-01-23T04:56:07.000+00:00
              created: 2000-01-23T04:56:07.000+00:00
              modified: 2000-01-23T04:56:07.000+00:00
              source: slack
              cell_type: cell_type
              display_time: 2000-01-23T04:56:07.000+00:00
              content: ""
            - deleted: 2000-01-23T04:56:07.000+00:00
              created: 2000-01-23T04:56:07.000+00:00
              modified: 2000-01-23T04:56:07.000+00:00
              source: slack
              cell_type: cell_type
              display_time: 2000-01-23T04:56:07.000+00:00
              content: ""
            customer_impacted: true
            resolved: 2000-01-23T04:56:07.000+00:00
        included:
        - relationships:
            org:
              data:
                id: 00000000-0000-0000-0000-000000000000
                type: orgs
          attributes:
            icon: /path/to/matching/gravatar/icon
            name: test user
            verified: true
            disabled: false
            handle: test@datadoghq.com
            email: test@datadoghq.com
          id: 00000000-0000-0000-0000-000000000000
          type: users
        - relationships:
            org:
              data:
                id: 00000000-0000-0000-0000-000000000000
                type: orgs
          attributes:
            icon: /path/to/matching/gravatar/icon
            name: test user
            verified: true
            disabled: false
            handle: test@datadoghq.com
            email: test@datadoghq.com
          id: 00000000-0000-0000-0000-000000000000
          type: users
      properties:
        data:
          $ref: '#/components/schemas/IncidentCreateWithInitialData'
        included:
          description: The User relationships.
          items:
            $ref: '#/components/schemas/UserJSONAPIResponse'
          readOnly: true
          type: array
      required:
      - data
      type: object
    IncidentFacetPercentilesAggregationDataSchema:
      description: A `percentiles` aggregation for facets.
      properties:
        p1:
          description: The 1% distrubtion value.
          format: double
          nullable: true
          readOnly: true
          type: number
        p25:
          description: The 25% distrubtion value.
          format: double
          nullable: true
          readOnly: true
          type: number
        p5:
          description: The 5% distrubtion value.
          format: double
          nullable: true
          readOnly: true
          type: number
        p50:
          description: The 50% distrubtion value.
          format: double
          nullable: true
          readOnly: true
          type: number
        p75:
          description: The 75% distrubtion value.
          format: double
          nullable: true
          readOnly: true
          type: number
        p95:
          description: The 95% distrubtion value.
          format: double
          nullable: true
          readOnly: true
          type: number
        p99:
          description: The 99% distrubtion value.
          format: double
          nullable: true
          readOnly: true
          type: number
      type: object
    IncidentFacetSchema:
      description: The common Facet schema interface payload.
      example:
        data: ""
      properties:
        data:
          description: A facet definition.
          discriminator:
            mapping:
              aggregation_percentiles: '#/components/schemas/IncidentFacetPercentilesAggregationDataSchema'
              aggregation_stats: '#/components/schemas/IncidentFacetStatsAggregationDataSchema'
              aggregation_terms: '#/components/schemas/IncidentFacetTermsAggregationDataSchema'
            propertyName: type
          oneOf:
          - $ref: '#/components/schemas/IncidentFacetTermsAggregationDataSchema'
          - $ref: '#/components/schemas/IncidentFacetStatsAggregationDataSchema'
          - $ref: '#/components/schemas/IncidentFacetPercentilesAggregationDataSchema'
          x-oneOf-name: IncidentFacetSchemaDataOneOf
        type:
          $ref: '#/components/schemas/IncidentFacetType'
      type: object
    IncidentFacetStatsAggregationDataSchema:
      description: A `stats` aggregation for facets.
      properties:
        avg:
          description: The average value.
          format: double
          nullable: true
          readOnly: true
          type: number
        count:
          description: The count of matches.
          format: double
          nullable: true
          readOnly: true
          type: number
        max:
          description: The max value.
          format: double
          nullable: true
          readOnly: true
          type: number
        min:
          description: The min value.
          format: double
          nullable: true
          readOnly: true
          type: number
        sum:
          description: The sum of values.
          format: double
          nullable: true
          readOnly: true
          type: number
      type: object
    IncidentFacetTermsAggregationDataSchema:
      description: A `terms` aggregation for facets.
      properties:
        count:
          description: A count of the terms.
          nullable: true
          oneOf:
          - description: Integer form of the facet value.
            format: int64
            type: integer
          - description: String form of the facet value.
            type: string
          - description: Boolean form of the facet value.
            type: boolean
          readOnly: true
          x-oneOf-name: IncidentFacetTermsAggregationDataSchemaCountOneOf
        name:
          description: The key value for the term.
          oneOf:
          - description: String form of the facet.
            type: string
          - description: Boolean form of the facet.
            type: boolean
          readOnly: true
          x-oneOf-name: IncidentFacetTermsAggregationDataSchemaNameOneOf
      type: object
    IncidentFacetType:
      description: The type of the aggregation facet.
      enum:
      - aggregation_terms
      - aggregation_stats
      - aggregation_percentiles
      type: string
      x-enum-varnames:
      - AGGREGATION_TERMS
      - AGGREGATION_STATS
      - AGGREGATION_PERCENTILES
    IncidentInitialUserDefinedFieldChoices:
      description: The initial choice selections.
      example:
        field_id: 1
        choice_id: 6
      properties:
        choice_id:
          description: The User Defined Choice ID associated with the Field.
          format: int64
          type: integer
        field_id:
          description: The User Defined Field ID associated with the choice.
          format: int64
          type: integer
      required:
      - choice_id
      - field_id
      type: object
    IncidentListPayload:
      description: Represents the JSON API Payload of a List of Incident Items.
      example:
        data:
        - relationships:
            commander:
              data:
                id: 00000000-0000-0000-0000-000000000000
                type: users
            last_modified_by:
              data:
                id: 00000000-0000-0000-0000-000000000000
                type: users
            created_by:
              data:
                id: 00000000-0000-0000-0000-000000000000
                type: users
          attributes:
            time_to_repair: 5
            created: 2000-01-23T04:56:07.000+00:00
            time_to_internal_response: 5
            title: title
            public_id: 6
            time_to_detect: 1
            customer_impact_scope: customer_impact_scope
            duration: 0
            customer_impact_end: 2000-01-23T04:56:07.000+00:00
            customer_impact_start: 2000-01-23T04:56:07.000+00:00
            detected: 2000-01-23T04:56:07.000+00:00
            modified: 2000-01-23T04:56:07.000+00:00
            state: active
            customer_impacted: true
            resolved: 2000-01-23T04:56:07.000+00:00
          id: "1234"
          type: incidents
        - relationships:
            commander:
              data:
                id: 00000000-0000-0000-0000-000000000000
                type: users
            last_modified_by:
              data:
                id: 00000000-0000-0000-0000-000000000000
                type: users
            created_by:
              data:
                id: 00000000-0000-0000-0000-000000000000
                type: users
          attributes:
            time_to_repair: 5
            created: 2000-01-23T04:56:07.000+00:00
            time_to_internal_response: 5
            title: title
            public_id: 6
            time_to_detect: 1
            customer_impact_scope: customer_impact_scope
            duration: 0
            customer_impact_end: 2000-01-23T04:56:07.000+00:00
            customer_impact_start: 2000-01-23T04:56:07.000+00:00
            detected: 2000-01-23T04:56:07.000+00:00
            modified: 2000-01-23T04:56:07.000+00:00
            state: active
            customer_impacted: true
            resolved: 2000-01-23T04:56:07.000+00:00
          id: "1234"
          type: incidents
        meta:
          pagination:
            offset: 10
            limit: 1000
            next_offset: 1000
        included:
        - relationships:
            org:
              data:
                id: 00000000-0000-0000-0000-000000000000
                type: orgs
          attributes:
            icon: /path/to/matching/gravatar/icon
            name: test user
            verified: true
            disabled: false
            handle: test@datadoghq.com
            email: test@datadoghq.com
          id: 00000000-0000-0000-0000-000000000000
          type: users
        - relationships:
            org:
              data:
                id: 00000000-0000-0000-0000-000000000000
                type: orgs
          attributes:
            icon: /path/to/matching/gravatar/icon
            name: test user
            verified: true
            disabled: false
            handle: test@datadoghq.com
            email: test@datadoghq.com
          id: 00000000-0000-0000-0000-000000000000
          type: users
      properties:
        data:
          description: The Incident payloads.
          items:
            $ref: '#/components/schemas/Incident'
          type: array
        included:
          description: The User relationships.
          items:
            $ref: '#/components/schemas/UserJSONAPIResponse'
          readOnly: true
          type: array
        meta:
          $ref: '#/components/schemas/QueryMetadata'
      required:
      - data
      type: object
    IncidentPayload:
      description: Represents the JSON API Payload of an Incident Item.
      example:
        data:
          relationships:
            commander:
              data:
                id: 00000000-0000-0000-0000-000000000000
                type: users
            last_modified_by:
              data:
                id: 00000000-0000-0000-0000-000000000000
                type: users
            created_by:
              data:
                id: 00000000-0000-0000-0000-000000000000
                type: users
          attributes:
            time_to_repair: 5
            created: 2000-01-23T04:56:07.000+00:00
            time_to_internal_response: 5
            title: title
            public_id: 6
            time_to_detect: 1
            customer_impact_scope: customer_impact_scope
            duration: 0
            customer_impact_end: 2000-01-23T04:56:07.000+00:00
            customer_impact_start: 2000-01-23T04:56:07.000+00:00
            detected: 2000-01-23T04:56:07.000+00:00
            modified: 2000-01-23T04:56:07.000+00:00
            state: active
            customer_impacted: true
            resolved: 2000-01-23T04:56:07.000+00:00
          id: "1234"
          type: incidents
        included:
        - relationships:
            org:
              data:
                id: 00000000-0000-0000-0000-000000000000
                type: orgs
          attributes:
            icon: /path/to/matching/gravatar/icon
            name: test user
            verified: true
            disabled: false
            handle: test@datadoghq.com
            email: test@datadoghq.com
          id: 00000000-0000-0000-0000-000000000000
          type: users
        - relationships:
            org:
              data:
                id: 00000000-0000-0000-0000-000000000000
                type: orgs
          attributes:
            icon: /path/to/matching/gravatar/icon
            name: test user
            verified: true
            disabled: false
            handle: test@datadoghq.com
            email: test@datadoghq.com
          id: 00000000-0000-0000-0000-000000000000
          type: users
      properties:
        data:
          $ref: '#/components/schemas/Incident'
        included:
          description: The User relationships.
          items:
            $ref: '#/components/schemas/UserJSONAPIResponse'
          readOnly: true
          type: array
      required:
      - data
      type: object
    IncidentPostmortem:
      description: Represents an Incident Postmortem Item.
      example:
        relationships:
          last_modified_by:
            data:
              id: 00000000-0000-0000-0000-000000000000
              type: users
          created_by:
            data:
              id: 00000000-0000-0000-0000-000000000000
              type: users
        attributes:
          incident_id: incident_id
          created: 2000-01-23T04:56:07.000+00:00
          modified: 2000-01-23T04:56:07.000+00:00
          state: draft
        id: "1234"
        type: incident_postmortems
      properties:
        attributes:
          $ref: '#/components/schemas/IncidentPostmortem_attributes'
        id:
          description: The Postmortem ID.
          example: "1234"
          readOnly: true
          type: string
        relationships:
          $ref: '#/components/schemas/IncidentConfigField_relationships'
        type:
          description: JSONAPI Model Type
          example: incident_postmortems
          type: string
      required:
      - content
      type: object
    IncidentPostmortemListPayload:
      description: Represents the JSON API Payload of a List of Incident Postmortem
        Items.
      example:
        data:
        - relationships:
            last_modified_by:
              data:
                id: 00000000-0000-0000-0000-000000000000
                type: users
            created_by:
              data:
                id: 00000000-0000-0000-0000-000000000000
                type: users
          attributes:
            incident_id: incident_id
            created: 2000-01-23T04:56:07.000+00:00
            modified: 2000-01-23T04:56:07.000+00:00
            state: draft
          id: "1234"
          type: incident_postmortems
        - relationships:
            last_modified_by:
              data:
                id: 00000000-0000-0000-0000-000000000000
                type: users
            created_by:
              data:
                id: 00000000-0000-0000-0000-000000000000
                type: users
          attributes:
            incident_id: incident_id
            created: 2000-01-23T04:56:07.000+00:00
            modified: 2000-01-23T04:56:07.000+00:00
            state: draft
          id: "1234"
          type: incident_postmortems
        meta:
          pagination:
            offset: 10
            limit: 1000
            next_offset: 1000
        included:
        - relationships:
            org:
              data:
                id: 00000000-0000-0000-0000-000000000000
                type: orgs
          attributes:
            icon: /path/to/matching/gravatar/icon
            name: test user
            verified: true
            disabled: false
            handle: test@datadoghq.com
            email: test@datadoghq.com
          id: 00000000-0000-0000-0000-000000000000
          type: users
        - relationships:
            org:
              data:
                id: 00000000-0000-0000-0000-000000000000
                type: orgs
          attributes:
            icon: /path/to/matching/gravatar/icon
            name: test user
            verified: true
            disabled: false
            handle: test@datadoghq.com
            email: test@datadoghq.com
          id: 00000000-0000-0000-0000-000000000000
          type: users
      properties:
        data:
          description: The Postmortem payloads.
          items:
            $ref: '#/components/schemas/IncidentPostmortem'
          type: array
        included:
          description: The User relationships.
          items:
            $ref: '#/components/schemas/UserJSONAPIResponse'
          readOnly: true
          type: array
        meta:
          $ref: '#/components/schemas/QueryMetadata'
      required:
      - data
      type: object
    IncidentPostmortemPayload:
      description: Represents the JSON API Payload of an Incident Postmortem Item.
      example:
        data:
          relationships:
            last_modified_by:
              data:
                id: 00000000-0000-0000-0000-000000000000
                type: users
            created_by:
              data:
                id: 00000000-0000-0000-0000-000000000000
                type: users
          attributes:
            incident_id: incident_id
            created: 2000-01-23T04:56:07.000+00:00
            modified: 2000-01-23T04:56:07.000+00:00
            state: draft
          id: "1234"
          type: incident_postmortems
        included:
        - relationships:
            org:
              data:
                id: 00000000-0000-0000-0000-000000000000
                type: orgs
          attributes:
            icon: /path/to/matching/gravatar/icon
            name: test user
            verified: true
            disabled: false
            handle: test@datadoghq.com
            email: test@datadoghq.com
          id: 00000000-0000-0000-0000-000000000000
          type: users
        - relationships:
            org:
              data:
                id: 00000000-0000-0000-0000-000000000000
                type: orgs
          attributes:
            icon: /path/to/matching/gravatar/icon
            name: test user
            verified: true
            disabled: false
            handle: test@datadoghq.com
            email: test@datadoghq.com
          id: 00000000-0000-0000-0000-000000000000
          type: users
      properties:
        data:
          $ref: '#/components/schemas/IncidentPostmortem'
        included:
          description: The User relationships.
          items:
            $ref: '#/components/schemas/UserJSONAPIResponse'
          readOnly: true
          type: array
      required:
      - data
      type: object
    IncidentSearch:
      description: Represents an Incident Search.
      example:
        attributes:
          total: 0
          incidents:
          - data:
              relationships:
                commander:
                  data:
                    id: 00000000-0000-0000-0000-000000000000
                    type: users
                last_modified_by:
                  data:
                    id: 00000000-0000-0000-0000-000000000000
                    type: users
                created_by:
                  data:
                    id: 00000000-0000-0000-0000-000000000000
                    type: users
              attributes:
                time_to_repair: 5
                created: 2000-01-23T04:56:07.000+00:00
                time_to_internal_response: 5
                title: title
                public_id: 6
                time_to_detect: 1
                customer_impact_scope: customer_impact_scope
                duration: 0
                customer_impact_end: 2000-01-23T04:56:07.000+00:00
                customer_impact_start: 2000-01-23T04:56:07.000+00:00
                detected: 2000-01-23T04:56:07.000+00:00
                modified: 2000-01-23T04:56:07.000+00:00
                state: active
                customer_impacted: true
                resolved: 2000-01-23T04:56:07.000+00:00
              id: "1234"
              type: incidents
            included:
            - relationships:
                org:
                  data:
                    id: 00000000-0000-0000-0000-000000000000
                    type: orgs
              attributes:
                icon: /path/to/matching/gravatar/icon
                name: test user
                verified: true
                disabled: false
                handle: test@datadoghq.com
                email: test@datadoghq.com
              id: 00000000-0000-0000-0000-000000000000
              type: users
            - relationships:
                org:
                  data:
                    id: 00000000-0000-0000-0000-000000000000
                    type: orgs
              attributes:
                icon: /path/to/matching/gravatar/icon
                name: test user
                verified: true
                disabled: false
                handle: test@datadoghq.com
                email: test@datadoghq.com
              id: 00000000-0000-0000-0000-000000000000
              type: users
          - data:
              relationships:
                commander:
                  data:
                    id: 00000000-0000-0000-0000-000000000000
                    type: users
                last_modified_by:
                  data:
                    id: 00000000-0000-0000-0000-000000000000
                    type: users
                created_by:
                  data:
                    id: 00000000-0000-0000-0000-000000000000
                    type: users
              attributes:
                time_to_repair: 5
                created: 2000-01-23T04:56:07.000+00:00
                time_to_internal_response: 5
                title: title
                public_id: 6
                time_to_detect: 1
                customer_impact_scope: customer_impact_scope
                duration: 0
                customer_impact_end: 2000-01-23T04:56:07.000+00:00
                customer_impact_start: 2000-01-23T04:56:07.000+00:00
                detected: 2000-01-23T04:56:07.000+00:00
                modified: 2000-01-23T04:56:07.000+00:00
                state: active
                customer_impacted: true
                resolved: 2000-01-23T04:56:07.000+00:00
              id: "1234"
              type: incidents
            included:
            - relationships:
                org:
                  data:
                    id: 00000000-0000-0000-0000-000000000000
                    type: orgs
              attributes:
                icon: /path/to/matching/gravatar/icon
                name: test user
                verified: true
                disabled: false
                handle: test@datadoghq.com
                email: test@datadoghq.com
              id: 00000000-0000-0000-0000-000000000000
              type: users
            - relationships:
                org:
                  data:
                    id: 00000000-0000-0000-0000-000000000000
                    type: orgs
              attributes:
                icon: /path/to/matching/gravatar/icon
                name: test user
                verified: true
                disabled: false
                handle: test@datadoghq.com
                email: test@datadoghq.com
              id: 00000000-0000-0000-0000-000000000000
              type: users
          facets:
            key:
              data: ""
        type: incidents_search_results
      properties:
        attributes:
          $ref: '#/components/schemas/IncidentSearch_attributes'
        type:
          default: incidents_search_results
          description: JSONAPI Model Type
          example: incidents_search_results
          type: string
      type: object
    IncidentSearchPayload:
      description: Represents the JSON API Payload of a List of Incident Items.
      example:
        data:
          attributes:
            total: 0
            incidents:
            - data:
                relationships:
                  commander:
                    data:
                      id: 00000000-0000-0000-0000-000000000000
                      type: users
                  last_modified_by:
                    data:
                      id: 00000000-0000-0000-0000-000000000000
                      type: users
                  created_by:
                    data:
                      id: 00000000-0000-0000-0000-000000000000
                      type: users
                attributes:
                  time_to_repair: 5
                  created: 2000-01-23T04:56:07.000+00:00
                  time_to_internal_response: 5
                  title: title
                  public_id: 6
                  time_to_detect: 1
                  customer_impact_scope: customer_impact_scope
                  duration: 0
                  customer_impact_end: 2000-01-23T04:56:07.000+00:00
                  customer_impact_start: 2000-01-23T04:56:07.000+00:00
                  detected: 2000-01-23T04:56:07.000+00:00
                  modified: 2000-01-23T04:56:07.000+00:00
                  state: active
                  customer_impacted: true
                  resolved: 2000-01-23T04:56:07.000+00:00
                id: "1234"
                type: incidents
              included:
              - relationships:
                  org:
                    data:
                      id: 00000000-0000-0000-0000-000000000000
                      type: orgs
                attributes:
                  icon: /path/to/matching/gravatar/icon
                  name: test user
                  verified: true
                  disabled: false
                  handle: test@datadoghq.com
                  email: test@datadoghq.com
                id: 00000000-0000-0000-0000-000000000000
                type: users
              - relationships:
                  org:
                    data:
                      id: 00000000-0000-0000-0000-000000000000
                      type: orgs
                attributes:
                  icon: /path/to/matching/gravatar/icon
                  name: test user
                  verified: true
                  disabled: false
                  handle: test@datadoghq.com
                  email: test@datadoghq.com
                id: 00000000-0000-0000-0000-000000000000
                type: users
            - data:
                relationships:
                  commander:
                    data:
                      id: 00000000-0000-0000-0000-000000000000
                      type: users
                  last_modified_by:
                    data:
                      id: 00000000-0000-0000-0000-000000000000
                      type: users
                  created_by:
                    data:
                      id: 00000000-0000-0000-0000-000000000000
                      type: users
                attributes:
                  time_to_repair: 5
                  created: 2000-01-23T04:56:07.000+00:00
                  time_to_internal_response: 5
                  title: title
                  public_id: 6
                  time_to_detect: 1
                  customer_impact_scope: customer_impact_scope
                  duration: 0
                  customer_impact_end: 2000-01-23T04:56:07.000+00:00
                  customer_impact_start: 2000-01-23T04:56:07.000+00:00
                  detected: 2000-01-23T04:56:07.000+00:00
                  modified: 2000-01-23T04:56:07.000+00:00
                  state: active
                  customer_impacted: true
                  resolved: 2000-01-23T04:56:07.000+00:00
                id: "1234"
                type: incidents
              included:
              - relationships:
                  org:
                    data:
                      id: 00000000-0000-0000-0000-000000000000
                      type: orgs
                attributes:
                  icon: /path/to/matching/gravatar/icon
                  name: test user
                  verified: true
                  disabled: false
                  handle: test@datadoghq.com
                  email: test@datadoghq.com
                id: 00000000-0000-0000-0000-000000000000
                type: users
              - relationships:
                  org:
                    data:
                      id: 00000000-0000-0000-0000-000000000000
                      type: orgs
                attributes:
                  icon: /path/to/matching/gravatar/icon
                  name: test user
                  verified: true
                  disabled: false
                  handle: test@datadoghq.com
                  email: test@datadoghq.com
                id: 00000000-0000-0000-0000-000000000000
                type: users
            facets:
              key:
                data: ""
          type: incidents_search_results
        meta:
          pagination:
            offset: 10
            limit: 1000
            next_offset: 1000
      properties:
        data:
          $ref: '#/components/schemas/IncidentSearch'
        meta:
          $ref: '#/components/schemas/QueryMetadata'
      required:
      - data
      type: object
    IncidentSelection:
      description: Represents an Incident Selection Item.
      example:
        relationships:
          field:
            data:
              relationships:
                last_modified_by:
                  data:
                    id: 00000000-0000-0000-0000-000000000000
                    type: users
                created_by:
                  data:
                    id: 00000000-0000-0000-0000-000000000000
                    type: users
              attributes:
                created: 2000-01-23T04:56:07.000+00:00
                name: state
                modified: 2000-01-23T04:56:07.000+00:00
                table_id: 0
                type: 1
                default_choice_id: "1234"
              id: "1234"
              type: field
          last_modified_by:
            data:
              id: 00000000-0000-0000-0000-000000000000
              type: users
          choice:
            data:
              relationships:
                last_modified_by:
                  data:
                    id: 00000000-0000-0000-0000-000000000000
                    type: users
                created_by:
                  data:
                    id: 00000000-0000-0000-0000-000000000000
                    type: users
              attributes:
                created: 2000-01-23T04:56:07.000+00:00
                name: Active
                modified: 2000-01-23T04:56:07.000+00:00
                user_defined_field_id: "123"
                value: active
              id: "1234"
              type: choice
        attributes:
          created: 2000-01-23T04:56:07.000+00:00
          modified: 2000-01-23T04:56:07.000+00:00
          object_id: object_id
        id: "1234"
        type: selections
      properties:
        attributes:
          $ref: '#/components/schemas/IncidentSelection_attributes'
        id:
          description: The Incident Selection ID.
          example: "1234"
          readOnly: true
          type: string
        relationships:
          $ref: '#/components/schemas/IncidentSelection_relationships'
        type:
          description: JSONAPI Model Type
          example: selections
          type: string
      required:
      - content
      type: object
    IncidentSelectionListPayload:
      description: Represents the JSON API Payload of a List of Incident Selection
        Items.
      example:
        data:
        - relationships:
            field:
              data:
                relationships:
                  last_modified_by:
                    data:
                      id: 00000000-0000-0000-0000-000000000000
                      type: users
                  created_by:
                    data:
                      id: 00000000-0000-0000-0000-000000000000
                      type: users
                attributes:
                  created: 2000-01-23T04:56:07.000+00:00
                  name: state
                  modified: 2000-01-23T04:56:07.000+00:00
                  table_id: 0
                  type: 1
                  default_choice_id: "1234"
                id: "1234"
                type: field
            last_modified_by:
              data:
                id: 00000000-0000-0000-0000-000000000000
                type: users
            choice:
              data:
                relationships:
                  last_modified_by:
                    data:
                      id: 00000000-0000-0000-0000-000000000000
                      type: users
                  created_by:
                    data:
                      id: 00000000-0000-0000-0000-000000000000
                      type: users
                attributes:
                  created: 2000-01-23T04:56:07.000+00:00
                  name: Active
                  modified: 2000-01-23T04:56:07.000+00:00
                  user_defined_field_id: "123"
                  value: active
                id: "1234"
                type: choice
          attributes:
            created: 2000-01-23T04:56:07.000+00:00
            modified: 2000-01-23T04:56:07.000+00:00
            object_id: object_id
          id: "1234"
          type: selections
        - relationships:
            field:
              data:
                relationships:
                  last_modified_by:
                    data:
                      id: 00000000-0000-0000-0000-000000000000
                      type: users
                  created_by:
                    data:
                      id: 00000000-0000-0000-0000-000000000000
                      type: users
                attributes:
                  created: 2000-01-23T04:56:07.000+00:00
                  name: state
                  modified: 2000-01-23T04:56:07.000+00:00
                  table_id: 0
                  type: 1
                  default_choice_id: "1234"
                id: "1234"
                type: field
            last_modified_by:
              data:
                id: 00000000-0000-0000-0000-000000000000
                type: users
            choice:
              data:
                relationships:
                  last_modified_by:
                    data:
                      id: 00000000-0000-0000-0000-000000000000
                      type: users
                  created_by:
                    data:
                      id: 00000000-0000-0000-0000-000000000000
                      type: users
                attributes:
                  created: 2000-01-23T04:56:07.000+00:00
                  name: Active
                  modified: 2000-01-23T04:56:07.000+00:00
                  user_defined_field_id: "123"
                  value: active
                id: "1234"
                type: choice
          attributes:
            created: 2000-01-23T04:56:07.000+00:00
            modified: 2000-01-23T04:56:07.000+00:00
            object_id: object_id
          id: "1234"
          type: selections
        meta:
          pagination:
            offset: 10
            limit: 1000
            next_offset: 1000
        included:
        - relationships:
            org:
              data:
                id: 00000000-0000-0000-0000-000000000000
                type: orgs
          attributes:
            icon: /path/to/matching/gravatar/icon
            name: test user
            verified: true
            disabled: false
            handle: test@datadoghq.com
            email: test@datadoghq.com
          id: 00000000-0000-0000-0000-000000000000
          type: users
        - relationships:
            org:
              data:
                id: 00000000-0000-0000-0000-000000000000
                type: orgs
          attributes:
            icon: /path/to/matching/gravatar/icon
            name: test user
            verified: true
            disabled: false
            handle: test@datadoghq.com
            email: test@datadoghq.com
          id: 00000000-0000-0000-0000-000000000000
          type: users
      properties:
        data:
          description: The Incident Selection payloads.
          items:
            $ref: '#/components/schemas/IncidentSelection'
          type: array
        included:
          description: The User relationships.
          items:
            $ref: '#/components/schemas/UserJSONAPIResponse'
          readOnly: true
          type: array
        meta:
          $ref: '#/components/schemas/QueryMetadata'
      required:
      - data
      type: object
    IncidentSelectionPayload:
      description: Represents the JSON API Payload of an Incident Selection Item.
      example:
        data:
          relationships:
            field:
              data:
                relationships:
                  last_modified_by:
                    data:
                      id: 00000000-0000-0000-0000-000000000000
                      type: users
                  created_by:
                    data:
                      id: 00000000-0000-0000-0000-000000000000
                      type: users
                attributes:
                  created: 2000-01-23T04:56:07.000+00:00
                  name: state
                  modified: 2000-01-23T04:56:07.000+00:00
                  table_id: 0
                  type: 1
                  default_choice_id: "1234"
                id: "1234"
                type: field
            last_modified_by:
              data:
                id: 00000000-0000-0000-0000-000000000000
                type: users
            choice:
              data:
                relationships:
                  last_modified_by:
                    data:
                      id: 00000000-0000-0000-0000-000000000000
                      type: users
                  created_by:
                    data:
                      id: 00000000-0000-0000-0000-000000000000
                      type: users
                attributes:
                  created: 2000-01-23T04:56:07.000+00:00
                  name: Active
                  modified: 2000-01-23T04:56:07.000+00:00
                  user_defined_field_id: "123"
                  value: active
                id: "1234"
                type: choice
          attributes:
            created: 2000-01-23T04:56:07.000+00:00
            modified: 2000-01-23T04:56:07.000+00:00
            object_id: object_id
          id: "1234"
          type: selections
        included:
        - relationships:
            org:
              data:
                id: 00000000-0000-0000-0000-000000000000
                type: orgs
          attributes:
            icon: /path/to/matching/gravatar/icon
            name: test user
            verified: true
            disabled: false
            handle: test@datadoghq.com
            email: test@datadoghq.com
          id: 00000000-0000-0000-0000-000000000000
          type: users
        - relationships:
            org:
              data:
                id: 00000000-0000-0000-0000-000000000000
                type: orgs
          attributes:
            icon: /path/to/matching/gravatar/icon
            name: test user
            verified: true
            disabled: false
            handle: test@datadoghq.com
            email: test@datadoghq.com
          id: 00000000-0000-0000-0000-000000000000
          type: users
      properties:
        data:
          $ref: '#/components/schemas/IncidentSelection'
        included:
          description: The User relationships.
          items:
            $ref: '#/components/schemas/UserJSONAPIResponse'
          readOnly: true
          type: array
      required:
      - data
      type: object
    IncidentSummary:
      description: Represents an Incident Summary.
      example:
        attributes:
          total: 0
          facets:
            key:
              data: ""
        type: incidents_search_results
      properties:
        attributes:
          $ref: '#/components/schemas/IncidentSummary_attributes'
        type:
          default: incidents_search_results
          description: JSONAPI Model Type
          example: incidents_search_results
          type: string
      type: object
    IncidentSummaryPayload:
      description: Represents the JSON API Payload of an Incident Summary.
      example:
        data:
          attributes:
            total: 0
            facets:
              key:
                data: ""
          type: incidents_search_results
        meta:
          pagination:
            offset: 10
            limit: 1000
            next_offset: 1000
      properties:
        data:
          $ref: '#/components/schemas/IncidentSummary'
        meta:
          $ref: '#/components/schemas/QueryMetadata'
      required:
      - data
      type: object
    IncidentTimelineCellChoiceChangeContent:
      description: A Choice Change cell content schema.
      properties:
        after:
          $ref: '#/components/schemas/IncidentTimelineCellChoiceChangeContentData'
        before:
          $ref: '#/components/schemas/IncidentTimelineCellChoiceChangeContentData'
        choice:
          $ref: '#/components/schemas/IncidentTimelineCellChoiceChangeContentData'
      required:
      - choice
      type: object
    IncidentTimelineCellChoiceChangeContentData:
      description: A Choice Change cell content schema for the choice selected.
      properties:
        id:
          description: The choice id.
          nullable: false
          type: string
        name:
          description: The choice name.
          nullable: false
          type: string
      required:
      - id
      - name
      type: object
    IncidentTimelineCellCommon:
      description: The Timeline cell content. This is used both as a payload return
        as well as can be used to initialize an incident.
      example:
        deleted: 2000-01-23T04:56:07.000+00:00
        created: 2000-01-23T04:56:07.000+00:00
        modified: 2000-01-23T04:56:07.000+00:00
        source: slack
        cell_type: cell_type
        display_time: 2000-01-23T04:56:07.000+00:00
        content: ""
      properties:
        cell_type:
          description: A string representing the cell content type.
          nullable: false
          type: string
        content:
          description: The cell content.
          discriminator:
            mapping:
              choice_change: '#/components/schemas/IncidentTimelineCellChoiceChangeContent'
              markdown: '#/components/schemas/IncidentTimelineCellMarkdownContent'
              status_change: '#/components/schemas/IncidentTimelineCellStatusChangeContent'
            propertyName: cell_type
          nullable: false
          oneOf:
          - $ref: '#/components/schemas/IncidentTimelineCellMarkdownContent'
          - $ref: '#/components/schemas/IncidentTimelineCellStatusChangeContent'
          - $ref: '#/components/schemas/IncidentTimelineCellChoiceChangeContent'
          x-oneOf-name: IncidentTimelineCellCommonContentOneOf
        created:
          description: Timestamp of when a cell was created.
          format: date-time
          readOnly: true
          type: string
        deleted:
          description: Timestamp of when a cell was deleted.
          format: date-time
          readOnly: true
          type: string
        display_time:
          description: Timestamp of display time for a given cell. This is used to
            sort the timeline view.
          format: date-time
          readOnly: true
          type: string
        modified:
          description: Timestamp of when a cell was modified.
          format: date-time
          readOnly: true
          type: string
        source:
          description: A string representing the source of the cell.
          example: slack
          nullable: true
          type: string
      required:
      - cell_type
      - content
      type: object
    IncidentTimelineCellMarkdownContent:
      description: A Markdown cell content schema.
      properties:
        content:
          description: The markdown content of the cell.
          nullable: false
          type: string
      required:
      - content
      type: object
    IncidentTimelineCellStatusChangeContent:
      description: A Status Change cell content schema.
      properties:
        content:
          description: The markdown content of the status change for the cell.
          nullable: false
          type: string
        status_type:
          description: A string representing the status change type.
          example: incident
          nullable: false
          type: string
      required:
      - content
      - status_type
      type: object
    IncidentTodo:
      description: Represents an Incident Todo Item.
      example:
        relationships:
          last_modified_by:
            data:
              id: 00000000-0000-0000-0000-000000000000
              type: users
          created_by:
            data:
              id: 00000000-0000-0000-0000-000000000000
              type: users
        attributes:
          incident_id: incident_id
          created: 2000-01-23T04:56:07.000+00:00
          modified: 2000-01-23T04:56:07.000+00:00
          completed: 2000-01-23T04:56:07.000+00:00
          content: content
        id: "1234"
        type: incident_todos
      properties:
        attributes:
          $ref: '#/components/schemas/IncidentTodo_attributes'
        id:
          description: Incident Todo ID.
          example: "1234"
          readOnly: true
          type: string
        relationships:
          $ref: '#/components/schemas/IncidentTodo_relationships'
        type:
          description: JSONAPI Model Type.
          example: incident_todos
          type: string
      required:
      - content
      type: object
    IncidentTodoListPayload:
      description: Represents the JSON API Payload of a List of Incident Todo Items.
      example:
        data:
        - relationships:
            last_modified_by:
              data:
                id: 00000000-0000-0000-0000-000000000000
                type: users
            created_by:
              data:
                id: 00000000-0000-0000-0000-000000000000
                type: users
          attributes:
            incident_id: incident_id
            created: 2000-01-23T04:56:07.000+00:00
            modified: 2000-01-23T04:56:07.000+00:00
            completed: 2000-01-23T04:56:07.000+00:00
            content: content
          id: "1234"
          type: incident_todos
        - relationships:
            last_modified_by:
              data:
                id: 00000000-0000-0000-0000-000000000000
                type: users
            created_by:
              data:
                id: 00000000-0000-0000-0000-000000000000
                type: users
          attributes:
            incident_id: incident_id
            created: 2000-01-23T04:56:07.000+00:00
            modified: 2000-01-23T04:56:07.000+00:00
            completed: 2000-01-23T04:56:07.000+00:00
            content: content
          id: "1234"
          type: incident_todos
        meta:
          pagination:
            offset: 10
            limit: 1000
            next_offset: 1000
        included:
        - relationships:
            org:
              data:
                id: 00000000-0000-0000-0000-000000000000
                type: orgs
          attributes:
            icon: /path/to/matching/gravatar/icon
            name: test user
            verified: true
            disabled: false
            handle: test@datadoghq.com
            email: test@datadoghq.com
          id: 00000000-0000-0000-0000-000000000000
          type: users
        - relationships:
            org:
              data:
                id: 00000000-0000-0000-0000-000000000000
                type: orgs
          attributes:
            icon: /path/to/matching/gravatar/icon
            name: test user
            verified: true
            disabled: false
            handle: test@datadoghq.com
            email: test@datadoghq.com
          id: 00000000-0000-0000-0000-000000000000
          type: users
      properties:
        data:
          description: The Incident Todos.
          items:
            $ref: '#/components/schemas/IncidentTodo'
          type: array
        included:
          description: The User relationships.
          items:
            $ref: '#/components/schemas/UserJSONAPIResponse'
          readOnly: true
          type: array
        meta:
          $ref: '#/components/schemas/QueryMetadata'
      required:
      - data
      type: object
    IncidentTodoPayload:
      description: Represents the JSON API Payload of an Incident Todo Item.
      example:
        data:
          relationships:
            last_modified_by:
              data:
                id: 00000000-0000-0000-0000-000000000000
                type: users
            created_by:
              data:
                id: 00000000-0000-0000-0000-000000000000
                type: users
          attributes:
            incident_id: incident_id
            created: 2000-01-23T04:56:07.000+00:00
            modified: 2000-01-23T04:56:07.000+00:00
            completed: 2000-01-23T04:56:07.000+00:00
            content: content
          id: "1234"
          type: incident_todos
        included:
        - relationships:
            org:
              data:
                id: 00000000-0000-0000-0000-000000000000
                type: orgs
          attributes:
            icon: /path/to/matching/gravatar/icon
            name: test user
            verified: true
            disabled: false
            handle: test@datadoghq.com
            email: test@datadoghq.com
          id: 00000000-0000-0000-0000-000000000000
          type: users
        - relationships:
            org:
              data:
                id: 00000000-0000-0000-0000-000000000000
                type: orgs
          attributes:
            icon: /path/to/matching/gravatar/icon
            name: test user
            verified: true
            disabled: false
            handle: test@datadoghq.com
            email: test@datadoghq.com
          id: 00000000-0000-0000-0000-000000000000
          type: users
      properties:
        data:
          $ref: '#/components/schemas/IncidentTodo'
        included:
          description: JSON API Schema User relationships included.
          items:
            $ref: '#/components/schemas/UserJSONAPIResponse'
          readOnly: true
          type: array
      required:
      - data
      type: object
    Organization:
      description: Organization object.
      properties:
        attributes:
          $ref: '#/components/schemas/OrganizationAttributes'
        id:
          description: ID of the organization.
          type: string
        type:
          default: orgs
          description: Organizations resource type.
          readOnly: true
          type: string
      type: object
    OrganizationAttributes:
      description: Attributes of the organization.
      properties:
        created_at:
          description: Creation time of the organization.
          format: date-time
          type: string
        description:
          description: Description of the organization.
          type: string
        disabled:
          description: Whether or not the organization is disabled.
          type: boolean
        modified_at:
          description: Time of last organization modification.
          format: date-time
          type: string
        name:
          description: Name of the organization.
          type: string
        public_id:
          description: Public ID of the organization.
          type: string
        sharing:
          description: Sharing type of the organization.
          type: string
        url:
          description: URL of the site that this organization exists at.
          type: string
      type: object
    OrganizationJSONAPIID:
      description: JSONAPI Response with an organization ID.
      example:
        id: 00000000-0000-0000-0000-000000000000
        type: orgs
      properties:
        id:
          description: Unique identifier that represents the org.
          example: 00000000-0000-0000-0000-000000000000
          type: string
        type:
          description: JSONAPI Model Type
          example: orgs
          type: string
      type: object
    Pagination:
      description: Pagination object.
      example:
        total_count: 0
        total_filtered_count: 6
      properties:
        total_count:
          description: Total count of pages.
          format: int64
          type: integer
        total_filtered_count:
          description: Total count of filtered pages.
          format: int64
          type: integer
      type: object
    Permission:
      description: Permission object.
      example:
        attributes:
          display_type: display_type
          group_name: group_name
          created: 2000-01-23T04:56:07.000+00:00
          restricted: true
          name: name
          description: description
          display_name: display_name
        id: id
        type: permissions
      properties:
        attributes:
          $ref: '#/components/schemas/PermissionAttributes'
        id:
          description: ID of the permission.
          type: string
        type:
          default: permissions
          description: Permissions resource type.
          readOnly: true
          type: string
      type: object
    PermissionAttributes:
      description: Attributes of a permission.
      example:
        display_type: display_type
        group_name: group_name
        created: 2000-01-23T04:56:07.000+00:00
        restricted: true
        name: name
        description: description
        display_name: display_name
      properties:
        created:
          description: Creation time of the permission.
          format: date-time
          type: string
        description:
          description: Description of the permission.
          type: string
        display_name:
          description: Displayed name for the permission.
          type: string
        display_type:
          description: Display type.
          type: string
        group_name:
          description: Name of the permission group.
          type: string
        name:
          description: Name of the permission.
          type: string
        restricted:
          description: Whether or not the permission is restricted.
          type: boolean
      type: object
    Permissions:
      description: Payload with API-returned permissions.
      example:
        data:
        - attributes:
            display_type: display_type
            group_name: group_name
            created: 2000-01-23T04:56:07.000+00:00
            restricted: true
            name: name
            description: description
            display_name: display_name
          id: id
          type: permissions
        - attributes:
            display_type: display_type
            group_name: group_name
            created: 2000-01-23T04:56:07.000+00:00
            restricted: true
            name: name
            description: description
            display_name: display_name
          id: id
          type: permissions
      properties:
        data:
          description: Array of permissions.
          items:
            $ref: '#/components/schemas/Permission'
          type: array
      type: object
    QueryMetadata:
      description: The query metadata containing pagination metadata.
      example:
        pagination:
          offset: 10
          limit: 1000
          next_offset: 1000
      properties:
        pagination:
          $ref: '#/components/schemas/QueryMetadata_pagination'
      readOnly: true
      type: object
    QuerySortOrder:
      default: desc
      description: Direction of sort.
      enum:
      - asc
      - desc
      type: string
      x-enum-varnames:
      - ASC
      - DESC
    RelationshipToOrganization:
      description: Relationship to an organization.
      example:
        data:
          id: id
          type: orgs
      properties:
        data:
          $ref: '#/components/schemas/RelationshipToOrganizationData'
      type: object
    RelationshipToOrganizationData:
      description: Relationship to organization object.
      example:
        id: id
        type: orgs
      properties:
        id:
          description: ID of the organization.
          type: string
        type:
          default: orgs
          description: Organizations type.
          readOnly: true
          type: string
      type: object
    RelationshipToOrganizations:
      description: Relationship to organizations.
      example:
        data:
        - id: id
          type: orgs
        - id: id
          type: orgs
      properties:
        data:
          description: Relationships to organization objects.
          items:
            $ref: '#/components/schemas/RelationshipToOrganizationData'
          type: array
      type: object
    RelationshipToPermissionData:
      description: Relationship to permission object.
      properties:
        id:
          description: ID of the permission.
          type: string
        type:
          default: permissions
          description: Permissions resource type.
          readOnly: true
          type: string
      type: object
    RelationshipToPermissions:
      description: Relationship to multiple permissions objects.
      properties:
        data:
          description: Relationships to permission objects.
          items:
            $ref: '#/components/schemas/RelationshipToPermissionData'
          type: array
      type: object
    RelationshipToRoleData:
      description: Relationship to role object.
      example:
        id: id
        type: roles
      properties:
        id:
          description: ID of the role.
          type: string
        type:
          default: roles
          description: TODO
          type: string
      type: object
    RelationshipToRoles:
      description: Relationship to roles.
      example:
        data:
        - id: id
          type: roles
        - id: id
          type: roles
      properties:
        data:
          description: TODO.
          items:
            $ref: '#/components/schemas/RelationshipToRoleData'
          type: array
      type: object
    RelationshipToUser:
      description: Relationship to user.
      example:
        data:
          id: id
          type: users
      properties:
        data:
          $ref: '#/components/schemas/RelationshipToUserData'
      type: object
    RelationshipToUserData:
      description: Relationship to user object.
      example:
        id: id
        type: users
      properties:
        id:
          description: ID of the user.
          type: string
        type:
          default: users
          description: Users type.
          readOnly: true
          type: string
      type: object
    RelationshipToUsers:
      description: Relationship to users.
      example:
        data:
        - id: id
          type: users
        - id: id
          type: users
      properties:
        data:
          description: Relationships to user objects.
          items:
            $ref: '#/components/schemas/RelationshipToUserData'
          type: array
      type: object
    ResponseMetaAttributes:
      description: Object describing meta attributes of response.
      example:
        page:
          total_count: 0
          total_filtered_count: 6
      properties:
        page:
          $ref: '#/components/schemas/Pagination'
      type: object
    Role:
      description: Role object.
      properties:
        attributes:
          $ref: '#/components/schemas/RoleAttributes'
        id:
          description: Role ID.
          type: string
        relationships:
          $ref: '#/components/schemas/RoleRelationships'
        type:
          default: roles
          description: TODO
          type: string
      type: object
    RoleAttributes:
      description: Attributes of the role.
      properties:
        created_at:
          description: Creation time of the role.
          format: date-time
          type: string
        modified_at:
          description: Time of last role modification.
          format: date-time
          type: string
        name:
          description: Name of the role.
          type: string
      type: object
    RoleRelationships:
      description: Role relationships object.
      properties:
        permissions:
          $ref: '#/components/schemas/RelationshipToPermissions'
      type: object
    Service:
      description: Represents a Service Item.
      example:
        relationships:
          last_modified_by:
            data:
              id: 00000000-0000-0000-0000-000000000000
              type: users
          created_by:
            data:
              id: 00000000-0000-0000-0000-000000000000
              type: users
        attributes:
          created: 2000-01-23T04:56:07.000+00:00
          name: service name
          modified: 2000-01-23T04:56:07.000+00:00
        id: "1234"
        type: service
      properties:
        attributes:
          $ref: '#/components/schemas/Service_attributes'
        id:
          description: Unique identifier that represents the Incident Config Field
            Choice.
          example: "1234"
          type: string
        relationships:
          $ref: '#/components/schemas/IncidentConfigField_relationships'
        type:
          default: service
          description: JSONAPI Model Type
          example: service
          type: string
      type: object
    ServiceListPayload:
      description: Represents the JSON API Payload of a List of Service Items.
      example:
        data:
        - relationships:
            last_modified_by:
              data:
                id: 00000000-0000-0000-0000-000000000000
                type: users
            created_by:
              data:
                id: 00000000-0000-0000-0000-000000000000
                type: users
          attributes:
            created: 2000-01-23T04:56:07.000+00:00
            name: service name
            modified: 2000-01-23T04:56:07.000+00:00
          id: "1234"
          type: service
        - relationships:
            last_modified_by:
              data:
                id: 00000000-0000-0000-0000-000000000000
                type: users
            created_by:
              data:
                id: 00000000-0000-0000-0000-000000000000
                type: users
          attributes:
            created: 2000-01-23T04:56:07.000+00:00
            name: service name
            modified: 2000-01-23T04:56:07.000+00:00
          id: "1234"
          type: service
        meta:
          pagination:
            offset: 10
            limit: 1000
            next_offset: 1000
        included:
        - relationships:
            org:
              data:
                id: 00000000-0000-0000-0000-000000000000
                type: orgs
          attributes:
            icon: /path/to/matching/gravatar/icon
            name: test user
            verified: true
            disabled: false
            handle: test@datadoghq.com
            email: test@datadoghq.com
          id: 00000000-0000-0000-0000-000000000000
          type: users
        - relationships:
            org:
              data:
                id: 00000000-0000-0000-0000-000000000000
                type: orgs
          attributes:
            icon: /path/to/matching/gravatar/icon
            name: test user
            verified: true
            disabled: false
            handle: test@datadoghq.com
            email: test@datadoghq.com
          id: 00000000-0000-0000-0000-000000000000
          type: users
      properties:
        data:
          description: The service payloads.
          items:
            $ref: '#/components/schemas/Service'
          type: array
        included:
          description: The User relationships.
          items:
            $ref: '#/components/schemas/UserJSONAPIResponse'
          readOnly: true
          type: array
        meta:
          $ref: '#/components/schemas/QueryMetadata'
      required:
      - data
      type: object
    ServicePayload:
      description: Represents the JSON API Payload of a Service Item.
      example:
        data:
          relationships:
            last_modified_by:
              data:
                id: 00000000-0000-0000-0000-000000000000
                type: users
            created_by:
              data:
                id: 00000000-0000-0000-0000-000000000000
                type: users
          attributes:
            created: 2000-01-23T04:56:07.000+00:00
            name: service name
            modified: 2000-01-23T04:56:07.000+00:00
          id: "1234"
          type: service
        included:
        - relationships:
            org:
              data:
                id: 00000000-0000-0000-0000-000000000000
                type: orgs
          attributes:
            icon: /path/to/matching/gravatar/icon
            name: test user
            verified: true
            disabled: false
            handle: test@datadoghq.com
            email: test@datadoghq.com
          id: 00000000-0000-0000-0000-000000000000
          type: users
        - relationships:
            org:
              data:
                id: 00000000-0000-0000-0000-000000000000
                type: orgs
          attributes:
            icon: /path/to/matching/gravatar/icon
            name: test user
            verified: true
            disabled: false
            handle: test@datadoghq.com
            email: test@datadoghq.com
          id: 00000000-0000-0000-0000-000000000000
          type: users
      properties:
        data:
          $ref: '#/components/schemas/Service'
        included:
          description: Service payloads.
          items:
            $ref: '#/components/schemas/UserJSONAPIResponse'
          readOnly: true
          type: array
      required:
      - data
      type: object
    Team:
      description: Represents a Team Item.
      example:
        relationships:
          last_modified_by:
            data:
              id: 00000000-0000-0000-0000-000000000000
              type: users
          created_by:
            data:
              id: 00000000-0000-0000-0000-000000000000
              type: users
        attributes:
          created: 2000-01-23T04:56:07.000+00:00
          name: team name
          modified: 2000-01-23T04:56:07.000+00:00
        id: "1234"
        type: teams
      properties:
        attributes:
          $ref: '#/components/schemas/Team_attributes'
        id:
          description: Unique identifier that represents the Incident Config Field
            Choice.
          example: "1234"
          type: string
        relationships:
          $ref: '#/components/schemas/IncidentConfigField_relationships'
        type:
          default: teams
          description: JSONAPI Model Type
          example: teams
          type: string
      type: object
    TeamListPayload:
      description: Represents the JSON API Payload of a List of Team Items.
      example:
        data:
        - relationships:
            last_modified_by:
              data:
                id: 00000000-0000-0000-0000-000000000000
                type: users
            created_by:
              data:
                id: 00000000-0000-0000-0000-000000000000
                type: users
          attributes:
            created: 2000-01-23T04:56:07.000+00:00
            name: team name
            modified: 2000-01-23T04:56:07.000+00:00
          id: "1234"
          type: teams
        - relationships:
            last_modified_by:
              data:
                id: 00000000-0000-0000-0000-000000000000
                type: users
            created_by:
              data:
                id: 00000000-0000-0000-0000-000000000000
                type: users
          attributes:
            created: 2000-01-23T04:56:07.000+00:00
            name: team name
            modified: 2000-01-23T04:56:07.000+00:00
          id: "1234"
          type: teams
        meta:
          pagination:
            offset: 10
            limit: 1000
            next_offset: 1000
        included:
        - relationships:
            org:
              data:
                id: 00000000-0000-0000-0000-000000000000
                type: orgs
          attributes:
            icon: /path/to/matching/gravatar/icon
            name: test user
            verified: true
            disabled: false
            handle: test@datadoghq.com
            email: test@datadoghq.com
          id: 00000000-0000-0000-0000-000000000000
          type: users
        - relationships:
            org:
              data:
                id: 00000000-0000-0000-0000-000000000000
                type: orgs
          attributes:
            icon: /path/to/matching/gravatar/icon
            name: test user
            verified: true
            disabled: false
            handle: test@datadoghq.com
            email: test@datadoghq.com
          id: 00000000-0000-0000-0000-000000000000
          type: users
      properties:
        data:
          description: The team payloads.
          items:
            $ref: '#/components/schemas/Team'
          type: array
        included:
          description: The User relationships.
          items:
            $ref: '#/components/schemas/UserJSONAPIResponse'
          readOnly: true
          type: array
        meta:
          $ref: '#/components/schemas/QueryMetadata'
      required:
      - data
      type: object
    TeamPayload:
      description: Represents the JSON API Payload of a Team Item.
      example:
        data:
          relationships:
            last_modified_by:
              data:
                id: 00000000-0000-0000-0000-000000000000
                type: users
            created_by:
              data:
                id: 00000000-0000-0000-0000-000000000000
                type: users
          attributes:
            created: 2000-01-23T04:56:07.000+00:00
            name: team name
            modified: 2000-01-23T04:56:07.000+00:00
          id: "1234"
          type: teams
        included:
        - relationships:
            org:
              data:
                id: 00000000-0000-0000-0000-000000000000
                type: orgs
          attributes:
            icon: /path/to/matching/gravatar/icon
            name: test user
            verified: true
            disabled: false
            handle: test@datadoghq.com
            email: test@datadoghq.com
          id: 00000000-0000-0000-0000-000000000000
          type: users
        - relationships:
            org:
              data:
                id: 00000000-0000-0000-0000-000000000000
                type: orgs
          attributes:
            icon: /path/to/matching/gravatar/icon
            name: test user
            verified: true
            disabled: false
            handle: test@datadoghq.com
            email: test@datadoghq.com
          id: 00000000-0000-0000-0000-000000000000
          type: users
      properties:
        data:
          $ref: '#/components/schemas/Team'
        included:
          description: The User relationships.
          items:
            $ref: '#/components/schemas/UserJSONAPIResponse'
          readOnly: true
          type: array
      required:
      - data
      type: object
    User:
      description: Create, edit, and disable users.
      example:
        icon: /path/to/matching/gravatar/icon
        name: test user
        verified: true
        disabled: false
        handle: test@datadoghq.com
        email: test@datadoghq.com
      properties:
        disabled:
          description: The new disabled status of the user.
          example: false
          type: boolean
        email:
          description: The new email of the user.
          example: test@datadoghq.com
          format: email
          type: string
        handle:
          description: The user handle, must be a valid email.
          example: test@datadoghq.com
          format: email
          type: string
        icon:
          description: Gravatar icon associated to the user.
          example: /path/to/matching/gravatar/icon
          readOnly: true
          type: string
        name:
          description: The name of the user.
          example: test user
          type: string
        verified:
          description: Whether or not the user logged in Datadog at least once.
          example: true
          readOnly: true
          type: boolean
      type: object
    UserCreateAttributes:
      description: Attributes of the created user.
      example:
        name: name
        title: title
        email: email
      properties:
        email:
          description: The email of the user.
          type: string
        name:
          description: The name of the user.
          type: string
        title:
          description: The title of the user.
          type: string
      type: object
    UserCreateData:
      description: Object to create a user.
      example:
        relationships:
          roles:
            data:
            - id: id
              type: roles
            - id: id
              type: roles
        attributes:
          name: name
          title: title
          email: email
        type: users
      properties:
        attributes:
          $ref: '#/components/schemas/UserCreateAttributes'
        relationships:
          $ref: '#/components/schemas/UserRelationships'
        type:
          default: users
          description: Users resource type.
          readOnly: true
          type: string
      type: object
    UserCreatePayload:
      description: Create a user.
      example:
        data:
          relationships:
            roles:
              data:
              - id: id
                type: roles
              - id: id
                type: roles
          attributes:
            name: name
            title: title
            email: email
          type: users
      properties:
        data:
          $ref: '#/components/schemas/UserCreateData'
      type: object
    UserInvitationData:
      description: Object to create a user invitation.
      example:
        relationships:
          user:
            data:
              id: id
              type: users
        type: user_invitations
      properties:
        relationships:
          $ref: '#/components/schemas/UserInvitationRelationships'
        type:
          default: user_invitations
          description: User invitations type.
          type: string
      type: object
    UserInvitationDataAttributes:
      description: Attributes of a user invitation.
      example:
        invite_type: invite_type
        expires_at: 2000-01-23T04:56:07.000+00:00
        created_at: 2000-01-23T04:56:07.000+00:00
        uuid: uuid
      properties:
        created_at:
          description: Creation time of the user invitation.
          format: date-time
          type: string
        expires_at:
          description: Time of invitation expiration.
          format: date-time
          type: string
        invite_type:
          description: Type of invitation.
          type: string
        uuid:
          description: UUID of the user invitation.
          type: string
      type: object
    UserInvitationPayload:
      description: Object to invite users to join the organization.
      example:
        data:
        - relationships:
            user:
              data:
                id: id
                type: users
          type: user_invitations
        - relationships:
            user:
              data:
                id: id
                type: users
          type: user_invitations
      properties:
        data:
          description: List of user invitations.
          items:
            $ref: '#/components/schemas/UserInvitationData'
          type: array
      type: object
    UserInvitationRelationships:
      description: Relationships data for user invitation.
      example:
        user:
          data:
            id: id
            type: users
      properties:
        user:
          $ref: '#/components/schemas/RelationshipToUser'
      type: object
    UserInvitationResponse:
      description: User invitation as returned by the API.
      example:
        data:
          attributes:
            invite_type: invite_type
            expires_at: 2000-01-23T04:56:07.000+00:00
            created_at: 2000-01-23T04:56:07.000+00:00
            uuid: uuid
          id: id
          type: user_invitations
      properties:
        data:
          $ref: '#/components/schemas/UserInvitationResponseData'
      type: object
    UserInvitationResponseData:
      description: Object of a user invitation returned by the API.
      example:
        attributes:
          invite_type: invite_type
          expires_at: 2000-01-23T04:56:07.000+00:00
          created_at: 2000-01-23T04:56:07.000+00:00
          uuid: uuid
        id: id
        type: user_invitations
      properties:
        attributes:
          $ref: '#/components/schemas/UserInvitationDataAttributes'
        id:
          description: ID of the user invitiation.
          type: string
        type:
          default: user_invitations
          description: User invitations type.
          type: string
      type: object
    UserInvitationsResponse:
      description: User invitations as returned by the API.
      example:
        data:
        - attributes:
            invite_type: invite_type
            expires_at: 2000-01-23T04:56:07.000+00:00
            created_at: 2000-01-23T04:56:07.000+00:00
            uuid: uuid
          id: id
          type: user_invitations
        - attributes:
            invite_type: invite_type
            expires_at: 2000-01-23T04:56:07.000+00:00
            created_at: 2000-01-23T04:56:07.000+00:00
            uuid: uuid
          id: id
          type: user_invitations
      properties:
        data:
          description: Array of user invitations.
          items:
            $ref: '#/components/schemas/UserInvitationResponseData'
          type: array
      type: object
    UserJSONAPIID:
      description: JSONAPI Response with an User ID.
      example:
        data:
          id: 00000000-0000-0000-0000-000000000000
          type: users
      properties:
        data:
          $ref: '#/components/schemas/UserJSONAPIID_data'
      type: object
    UserJSONAPIResponse:
      description: The JSON API Schema User response.
      example:
        relationships:
          org:
            data:
              id: 00000000-0000-0000-0000-000000000000
              type: orgs
        attributes:
          icon: /path/to/matching/gravatar/icon
          name: test user
          verified: true
          disabled: false
          handle: test@datadoghq.com
          email: test@datadoghq.com
        id: 00000000-0000-0000-0000-000000000000
        type: users
      properties:
        attributes:
          $ref: '#/components/schemas/User'
        id:
          description: A unique identifier that represents the user.
          example: 00000000-0000-0000-0000-000000000000
          type: string
        relationships:
          $ref: '#/components/schemas/UserJSONAPIResponse_relationships'
        type:
          default: users
          description: JSONAPI Model Type
          example: users
          type: string
      type: object
    UserRelationships:
      description: Relationships of the user object.
      example:
        roles:
          data:
          - id: id
            type: roles
          - id: id
            type: roles
      properties:
        roles:
          $ref: '#/components/schemas/RelationshipToRoles'
      type: object
    UserResponse:
      description: User object returned by the API.
      example:
        relationships:
          other_users:
            data:
            - id: id
              type: users
            - id: id
              type: users
          org:
            data:
              id: id
              type: orgs
          roles:
            data:
            - id: id
              type: roles
            - id: id
              type: roles
          other_orgs:
            data:
            - id: id
              type: orgs
            - id: id
              type: orgs
        attributes:
          icon: icon
          name: name
          verified: true
          created_at: 2000-01-23T04:56:07.000+00:00
          disabled: true
          handle: handle
          title: title
          email: email
          status: status
        id: id
        type: users
      properties:
        attributes:
          $ref: '#/components/schemas/UserResponseAttributes'
        id:
          description: ID of the user.
          type: string
        relationships:
          $ref: '#/components/schemas/UserResponseRelationships'
        type:
          default: users
          description: Users type.
          readOnly: true
          type: string
      type: object
    UserResponseAttributes:
      description: Attributes of user object returned by the API.
      example:
        icon: icon
        name: name
        verified: true
        created_at: 2000-01-23T04:56:07.000+00:00
        disabled: true
        handle: handle
        title: title
        email: email
        status: status
      properties:
        created_at:
          description: Creation time of the user.
          format: date-time
          type: string
        disabled:
          description: Whether the user is disabled.
          type: boolean
        email:
          description: Email of the user.
          type: string
        handle:
          description: Handle of the user.
          type: string
        icon:
          description: URL of the user's icon.
          type: string
        name:
          description: Name of the user.
          type: string
        status:
          description: Status of the user.
          type: string
        title:
          description: Title of the user.
          type: string
        verified:
          description: Whether the user is verified.
          type: boolean
      type: object
    UserResponseIncludedItem:
      description: An object related to a user.
      discriminator:
        mapping:
          orgs: '#/components/schemas/Organization'
          permissions: '#/components/schemas/Permission'
          roles: '#/components/schemas/Role'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/Organization'
      - $ref: '#/components/schemas/Permission'
      - $ref: '#/components/schemas/Role'
      type: object
      x-oneOf-name: UserResponseIncludedItem
    UserResponsePayload:
      description: Response containing information about a single user.
      example:
        data:
          relationships:
            other_users:
              data:
              - id: id
                type: users
              - id: id
                type: users
            org:
              data:
                id: id
                type: orgs
            roles:
              data:
              - id: id
                type: roles
              - id: id
                type: roles
            other_orgs:
              data:
              - id: id
                type: orgs
              - id: id
                type: orgs
          attributes:
            icon: icon
            name: name
            verified: true
            created_at: 2000-01-23T04:56:07.000+00:00
            disabled: true
            handle: handle
            title: title
            email: email
            status: status
          id: id
          type: users
        included:
        - null
        - null
      properties:
        data:
          $ref: '#/components/schemas/UserResponse'
        included:
          description: Array of objects related to the user.
          items:
            $ref: '#/components/schemas/UserResponseIncludedItem'
          type: array
      type: object
    UserResponseRelationships:
      description: Relationships of the user object returned by the API.
      example:
        other_users:
          data:
          - id: id
            type: users
          - id: id
            type: users
        org:
          data:
            id: id
            type: orgs
        roles:
          data:
          - id: id
            type: roles
          - id: id
            type: roles
        other_orgs:
          data:
          - id: id
            type: orgs
          - id: id
            type: orgs
      properties:
        org:
          $ref: '#/components/schemas/RelationshipToOrganization'
        other_orgs:
          $ref: '#/components/schemas/RelationshipToOrganizations'
        other_users:
          $ref: '#/components/schemas/RelationshipToUsers'
        roles:
          $ref: '#/components/schemas/RelationshipToRoles'
      type: object
    UserUpdateAttributes:
      description: Attributes of the edited user.
      example:
        name: name
        disabled: true
        email: email
      properties:
        disabled:
          description: If the user is enabled or disabled.
          type: boolean
        email:
          description: The email of the user.
          type: string
        name:
          description: The name of the user.
          type: string
      type: object
    UserUpdateData:
      description: Object to update a user.
      example:
        attributes:
          name: name
          disabled: true
          email: email
        id: id
        type: users
      properties:
        attributes:
          $ref: '#/components/schemas/UserUpdateAttributes'
        id:
          description: ID of the user.
          type: string
        type:
          default: users
          description: Users resource type.
          readOnly: true
          type: string
      type: object
    UserUpdatePayload:
      description: Update a user.
      example:
        data:
          attributes:
            name: name
            disabled: true
            email: email
          id: id
          type: users
      properties:
        data:
          $ref: '#/components/schemas/UserUpdateData'
      type: object
    UsersResponsePayload:
      description: Response containing information about multiple users.
      example:
        data:
        - relationships:
            other_users:
              data:
              - id: id
                type: users
              - id: id
                type: users
            org:
              data:
                id: id
                type: orgs
            roles:
              data:
              - id: id
                type: roles
              - id: id
                type: roles
            other_orgs:
              data:
              - id: id
                type: orgs
              - id: id
                type: orgs
          attributes:
            icon: icon
            name: name
            verified: true
            created_at: 2000-01-23T04:56:07.000+00:00
            disabled: true
            handle: handle
            title: title
            email: email
            status: status
          id: id
          type: users
        - relationships:
            other_users:
              data:
              - id: id
                type: users
              - id: id
                type: users
            org:
              data:
                id: id
                type: orgs
            roles:
              data:
              - id: id
                type: roles
              - id: id
                type: roles
            other_orgs:
              data:
              - id: id
                type: orgs
              - id: id
                type: orgs
          attributes:
            icon: icon
            name: name
            verified: true
            created_at: 2000-01-23T04:56:07.000+00:00
            disabled: true
            handle: handle
            title: title
            email: email
            status: status
          id: id
          type: users
        meta:
          page:
            total_count: 0
            total_filtered_count: 6
        included:
        - null
        - null
      properties:
        data:
          description: Array of returned users.
          items:
            $ref: '#/components/schemas/UserResponse'
          type: array
        included:
          description: Array of objects related to the users.
          items:
            $ref: '#/components/schemas/UserResponseIncludedItem'
          type: array
        meta:
          $ref: '#/components/schemas/ResponseMetaAttributes'
      type: object
    Incident_attributes:
      description: The Incident attributes.
      example:
        time_to_repair: 5
        created: 2000-01-23T04:56:07.000+00:00
        time_to_internal_response: 5
        title: title
        public_id: 6
        time_to_detect: 1
        customer_impact_scope: customer_impact_scope
        duration: 0
        customer_impact_end: 2000-01-23T04:56:07.000+00:00
        customer_impact_start: 2000-01-23T04:56:07.000+00:00
        detected: 2000-01-23T04:56:07.000+00:00
        modified: 2000-01-23T04:56:07.000+00:00
        state: active
        customer_impacted: true
        resolved: 2000-01-23T04:56:07.000+00:00
      properties:
        created:
          description: Timestamp of when an incident was created.
          format: date-time
          readOnly: true
          type: string
        customer_impact_end:
          description: Timestamp of when cusomters/users were no longer impacted by
            the incident.
          format: date-time
          nullable: true
          type: string
        customer_impact_scope:
          description: The scope at which customers were impacted.
          type: string
        customer_impact_start:
          description: Timestamp of when cusomters/users were impacted by the incident.
          format: date-time
          nullable: true
          type: string
        customer_impacted:
          description: True if customers/users were impacted by the incident.
          type: boolean
        detected:
          description: Timestamp of when an incident was detected.
          format: date-time
          nullable: true
          type: string
        duration:
          description: Length of the incident representing the delta of customer_impact_end-customer_impact_start.
          format: int64
          readOnly: true
          type: integer
        modified:
          description: Timestamp of when an incident was last modified.
          format: date-time
          readOnly: true
          type: string
        public_id:
          description: Unique auto incrementing id for each created incident specific
            to the organization.
          format: int64
          readOnly: true
          type: integer
        resolved:
          description: Timestamp of when an incident was resolved.
          format: date-time
          nullable: true
          type: string
        state:
          description: The current state if an incident.
          example: active
          type: string
        time_to_detect:
          description: The amount of time in seconds to detect the incident.
          format: int64
          readOnly: true
          type: integer
        time_to_internal_response:
          description: The amount of time in seconds to detect the incidents occurence.
            Represents the delta of detected - created.
          format: int64
          readOnly: true
          type: integer
        time_to_repair:
          description: The amount of time in seconds to resolve customer impact after
            detecting the issue. Represents the delta of customer_impact_end - detected.
          format: int64
          readOnly: true
          type: integer
        title:
          description: The title of the incident.
          type: string
    Incident_relationships:
      description: The User relationships.
      example:
        commander:
          data:
            id: 00000000-0000-0000-0000-000000000000
            type: users
        last_modified_by:
          data:
            id: 00000000-0000-0000-0000-000000000000
            type: users
        created_by:
          data:
            id: 00000000-0000-0000-0000-000000000000
            type: users
      properties:
        commander:
          $ref: '#/components/schemas/UserJSONAPIID'
        created_by:
          $ref: '#/components/schemas/UserJSONAPIID'
        last_modified_by:
          $ref: '#/components/schemas/UserJSONAPIID'
    IncidentConfigField_attributes:
      description: The JSON API Schema attributes.
      example:
        created: 2000-01-23T04:56:07.000+00:00
        name: state
        modified: 2000-01-23T04:56:07.000+00:00
        table_id: 0
        type: 1
        default_choice_id: "1234"
      properties:
        created:
          description: Timestamp of when the field was created.
          format: date-time
          readOnly: true
          type: string
        default_choice_id:
          description: The default Incident Config Choice/value for the provided field.
          example: "1234"
          type: string
        modified:
          description: Timestamp of when the field was modified.
          format: date-time
          readOnly: true
          type: string
        name:
          description: Name of the field.
          example: state
          type: string
        table_id:
          $ref: '#/components/schemas/IncidentConfigFieldTable'
        type:
          $ref: '#/components/schemas/IncidentConfigFieldType'
    IncidentConfigField_relationships:
      description: The User relationships.
      example:
        last_modified_by:
          data:
            id: 00000000-0000-0000-0000-000000000000
            type: users
        created_by:
          data:
            id: 00000000-0000-0000-0000-000000000000
            type: users
      properties:
        created_by:
          $ref: '#/components/schemas/UserJSONAPIID'
        last_modified_by:
          $ref: '#/components/schemas/UserJSONAPIID'
    IncidentConfigFieldChoice_attributes:
      description: The JSON API Schema attributes.
      example:
        created: 2000-01-23T04:56:07.000+00:00
        name: Active
        modified: 2000-01-23T04:56:07.000+00:00
        user_defined_field_id: "123"
        value: active
      properties:
        created:
          description: Timestamp of when the field was created
          format: date-time
          readOnly: true
          type: string
        modified:
          description: Timestamp of when the field was modified
          format: date-time
          readOnly: true
          type: string
        name:
          description: Name of the field
          example: Active
          type: string
        user_defined_field_id:
          description: The ID of the associated field
          example: "123"
          type: string
        value:
          description: value of the field
          example: active
          type: string
    IncidentCreateWithInitialData_attributes:
      description: The Incident attributes.
      example:
        time_to_repair: 7
        created: 2000-01-23T04:56:07.000+00:00
        time_to_internal_response: 2
        initial_user_defined_field_choices:
        - field_id: 1
          choice_id: 6
        - field_id: 1
          choice_id: 6
        title: title
        public_id: 5
        time_to_detect: 5
        customer_impact_scope: customer_impact_scope
        duration: 0
        customer_impact_end: 2000-01-23T04:56:07.000+00:00
        customer_impact_start: 2000-01-23T04:56:07.000+00:00
        detected: 2000-01-23T04:56:07.000+00:00
        modified: 2000-01-23T04:56:07.000+00:00
        state: active
        initial_cells:
        - deleted: 2000-01-23T04:56:07.000+00:00
          created: 2000-01-23T04:56:07.000+00:00
          modified: 2000-01-23T04:56:07.000+00:00
          source: slack
          cell_type: cell_type
          display_time: 2000-01-23T04:56:07.000+00:00
          content: ""
        - deleted: 2000-01-23T04:56:07.000+00:00
          created: 2000-01-23T04:56:07.000+00:00
          modified: 2000-01-23T04:56:07.000+00:00
          source: slack
          cell_type: cell_type
          display_time: 2000-01-23T04:56:07.000+00:00
          content: ""
        customer_impacted: true
        resolved: 2000-01-23T04:56:07.000+00:00
      properties:
        created:
          description: Timestamp of when an incident was created.
          format: date-time
          readOnly: true
          type: string
        customer_impact_end:
          description: Timestamp of when cusomters/users were no longer impacted by
            the incident.
          format: date-time
          nullable: true
          type: string
        customer_impact_scope:
          description: The scope at which customers were impacted.
          type: string
        customer_impact_start:
          description: Timestamp of when cusomters/users were impacted by the incident.
          format: date-time
          nullable: true
          type: string
        customer_impacted:
          description: True if customers/users were impacted by the incident.
          type: boolean
        detected:
          description: Timestamp of when an incident was detected.
          format: date-time
          nullable: true
          type: string
        duration:
          description: Length of the incident representing the delta of customer_impact_end-customer_impact_start.
          format: int64
          readOnly: true
          type: integer
        initial_cells:
          description: An array of initial timeline cell definitions to include.
          items:
            $ref: '#/components/schemas/IncidentTimelineCellCommon'
          type: array
        initial_user_defined_field_choices:
          description: An array of initial choices when creating an incident.
          items:
            $ref: '#/components/schemas/IncidentInitialUserDefinedFieldChoices'
          type: array
        modified:
          description: Timestamp of when an incident was last modified.
          format: date-time
          readOnly: true
          type: string
        public_id:
          description: Unique auto incrementing id for each created incident specific
            to the organization.
          format: int64
          readOnly: true
          type: integer
        resolved:
          description: Timestamp of when an incident was resolved.
          format: date-time
          nullable: true
          type: string
        state:
          description: The current state if an incident.
          example: active
          type: string
        time_to_detect:
          description: The amount of time in seconds to detect the incident.
          format: int64
          readOnly: true
          type: integer
        time_to_internal_response:
          description: The amount of time in seconds to detect the incidents occurence.
            Represents the delta of detected - created.
          format: int64
          readOnly: true
          type: integer
        time_to_repair:
          description: The amount of time in seconds to resolve customer impact after
            detecting the issue. Represents the delta of customer_impact_end - detected.
          format: int64
          readOnly: true
          type: integer
        title:
          description: The title of the incident.
          type: string
    IncidentPostmortem_attributes:
      description: The Postmortem attributes.
      example:
        incident_id: incident_id
        created: 2000-01-23T04:56:07.000+00:00
        modified: 2000-01-23T04:56:07.000+00:00
        state: draft
      properties:
        created:
          description: Timestamp of when an postmortem was created.
          format: date-time
          readOnly: true
          type: string
        incident_id:
          description: ID of the incident for this postmortem.
          readOnly: true
          type: string
        modified:
          description: Timestamp of when an postmortem was modified.
          format: date-time
          readOnly: true
          type: string
        state:
          default: not_started
          description: Current state of the postmortem (i.e. not_started. draft).
          example: draft
          type: string
    IncidentSearch_attributes:
      description: The Incident Search attributes.
      example:
        total: 0
        incidents:
        - data:
            relationships:
              commander:
                data:
                  id: 00000000-0000-0000-0000-000000000000
                  type: users
              last_modified_by:
                data:
                  id: 00000000-0000-0000-0000-000000000000
                  type: users
              created_by:
                data:
                  id: 00000000-0000-0000-0000-000000000000
                  type: users
            attributes:
              time_to_repair: 5
              created: 2000-01-23T04:56:07.000+00:00
              time_to_internal_response: 5
              title: title
              public_id: 6
              time_to_detect: 1
              customer_impact_scope: customer_impact_scope
              duration: 0
              customer_impact_end: 2000-01-23T04:56:07.000+00:00
              customer_impact_start: 2000-01-23T04:56:07.000+00:00
              detected: 2000-01-23T04:56:07.000+00:00
              modified: 2000-01-23T04:56:07.000+00:00
              state: active
              customer_impacted: true
              resolved: 2000-01-23T04:56:07.000+00:00
            id: "1234"
            type: incidents
          included:
          - relationships:
              org:
                data:
                  id: 00000000-0000-0000-0000-000000000000
                  type: orgs
            attributes:
              icon: /path/to/matching/gravatar/icon
              name: test user
              verified: true
              disabled: false
              handle: test@datadoghq.com
              email: test@datadoghq.com
            id: 00000000-0000-0000-0000-000000000000
            type: users
          - relationships:
              org:
                data:
                  id: 00000000-0000-0000-0000-000000000000
                  type: orgs
            attributes:
              icon: /path/to/matching/gravatar/icon
              name: test user
              verified: true
              disabled: false
              handle: test@datadoghq.com
              email: test@datadoghq.com
            id: 00000000-0000-0000-0000-000000000000
            type: users
        - data:
            relationships:
              commander:
                data:
                  id: 00000000-0000-0000-0000-000000000000
                  type: users
              last_modified_by:
                data:
                  id: 00000000-0000-0000-0000-000000000000
                  type: users
              created_by:
                data:
                  id: 00000000-0000-0000-0000-000000000000
                  type: users
            attributes:
              time_to_repair: 5
              created: 2000-01-23T04:56:07.000+00:00
              time_to_internal_response: 5
              title: title
              public_id: 6
              time_to_detect: 1
              customer_impact_scope: customer_impact_scope
              duration: 0
              customer_impact_end: 2000-01-23T04:56:07.000+00:00
              customer_impact_start: 2000-01-23T04:56:07.000+00:00
              detected: 2000-01-23T04:56:07.000+00:00
              modified: 2000-01-23T04:56:07.000+00:00
              state: active
              customer_impacted: true
              resolved: 2000-01-23T04:56:07.000+00:00
            id: "1234"
            type: incidents
          included:
          - relationships:
              org:
                data:
                  id: 00000000-0000-0000-0000-000000000000
                  type: orgs
            attributes:
              icon: /path/to/matching/gravatar/icon
              name: test user
              verified: true
              disabled: false
              handle: test@datadoghq.com
              email: test@datadoghq.com
            id: 00000000-0000-0000-0000-000000000000
            type: users
          - relationships:
              org:
                data:
                  id: 00000000-0000-0000-0000-000000000000
                  type: orgs
            attributes:
              icon: /path/to/matching/gravatar/icon
              name: test user
              verified: true
              disabled: false
              handle: test@datadoghq.com
              email: test@datadoghq.com
            id: 00000000-0000-0000-0000-000000000000
            type: users
        facets:
          key:
            data: ""
      properties:
        facets:
          additionalProperties:
            $ref: '#/components/schemas/IncidentFacetSchema'
          description: A mapping of search facets by facet name.
          nullable: true
          readOnly: true
          type: object
        incidents:
          description: The matched incidents if any.
          items:
            $ref: '#/components/schemas/IncidentPayload'
          readOnly: true
          type: array
        total:
          description: The total count of matched incidents.
          format: int64
          readOnly: true
          type: integer
    IncidentSelection_attributes:
      description: The Incident Selection attributes.
      example:
        created: 2000-01-23T04:56:07.000+00:00
        modified: 2000-01-23T04:56:07.000+00:00
        object_id: object_id
      properties:
        created:
          description: Timestamp of when an selection was created.
          format: date-time
          readOnly: true
          type: string
        modified:
          description: Timestamp of when an selection was modified.
          format: date-time
          readOnly: true
          type: string
        object_id:
          description: Represents the incident ID.
          readOnly: true
          type: string
    IncidentSelection_relationships_choice:
      description: The Incident Config Field Choice relationship.
      example:
        data:
          relationships:
            last_modified_by:
              data:
                id: 00000000-0000-0000-0000-000000000000
                type: users
            created_by:
              data:
                id: 00000000-0000-0000-0000-000000000000
                type: users
          attributes:
            created: 2000-01-23T04:56:07.000+00:00
            name: Active
            modified: 2000-01-23T04:56:07.000+00:00
            user_defined_field_id: "123"
            value: active
          id: "1234"
          type: choice
      properties:
        data:
          $ref: '#/components/schemas/IncidentConfigFieldChoice'
    IncidentSelection_relationships_field:
      description: The Incident Config Field relationship.
      example:
        data:
          relationships:
            last_modified_by:
              data:
                id: 00000000-0000-0000-0000-000000000000
                type: users
            created_by:
              data:
                id: 00000000-0000-0000-0000-000000000000
                type: users
          attributes:
            created: 2000-01-23T04:56:07.000+00:00
            name: state
            modified: 2000-01-23T04:56:07.000+00:00
            table_id: 0
            type: 1
            default_choice_id: "1234"
          id: "1234"
          type: field
      properties:
        data:
          $ref: '#/components/schemas/IncidentConfigField'
    IncidentSelection_relationships:
      description: The User and Config relationships.
      example:
        field:
          data:
            relationships:
              last_modified_by:
                data:
                  id: 00000000-0000-0000-0000-000000000000
                  type: users
              created_by:
                data:
                  id: 00000000-0000-0000-0000-000000000000
                  type: users
            attributes:
              created: 2000-01-23T04:56:07.000+00:00
              name: state
              modified: 2000-01-23T04:56:07.000+00:00
              table_id: 0
              type: 1
              default_choice_id: "1234"
            id: "1234"
            type: field
        last_modified_by:
          data:
            id: 00000000-0000-0000-0000-000000000000
            type: users
        choice:
          data:
            relationships:
              last_modified_by:
                data:
                  id: 00000000-0000-0000-0000-000000000000
                  type: users
              created_by:
                data:
                  id: 00000000-0000-0000-0000-000000000000
                  type: users
            attributes:
              created: 2000-01-23T04:56:07.000+00:00
              name: Active
              modified: 2000-01-23T04:56:07.000+00:00
              user_defined_field_id: "123"
              value: active
            id: "1234"
            type: choice
      properties:
        choice:
          $ref: '#/components/schemas/IncidentSelection_relationships_choice'
        field:
          $ref: '#/components/schemas/IncidentSelection_relationships_field'
        last_modified_by:
          $ref: '#/components/schemas/UserJSONAPIID'
    IncidentSummary_attributes:
      description: The Incident summary attributes.
      example:
        total: 0
        facets:
          key:
            data: ""
      properties:
        facets:
          additionalProperties:
            $ref: '#/components/schemas/IncidentFacetSchema'
          description: A mapping of search facets by facet name.
          nullable: true
          readOnly: true
          type: object
        total:
          description: The total count of matched incidents.
          format: int64
          readOnly: true
          type: integer
    IncidentTodo_attributes:
      description: JSON API Schema attributes.
      example:
        incident_id: incident_id
        created: 2000-01-23T04:56:07.000+00:00
        modified: 2000-01-23T04:56:07.000+00:00
        completed: 2000-01-23T04:56:07.000+00:00
        content: content
      properties:
        completed:
          description: Timestamp of when the todo was marked completed.
          format: date-time
          nullable: true
          type: string
        content:
          description: A string representing the content of the todo.
          type: string
        created:
          description: Timestamp of when an todo was created.
          format: date-time
          readOnly: true
          type: string
        incident_id:
          description: ID of the incident for this todo.
          readOnly: true
          type: string
        modified:
          description: Timestamp of when an todo was modified.
          format: date-time
          readOnly: true
          type: string
    IncidentTodo_relationships:
      description: JSON API Schema relationships.
      example:
        last_modified_by:
          data:
            id: 00000000-0000-0000-0000-000000000000
            type: users
        created_by:
          data:
            id: 00000000-0000-0000-0000-000000000000
            type: users
      properties:
        created_by:
          $ref: '#/components/schemas/UserJSONAPIID'
        last_modified_by:
          $ref: '#/components/schemas/UserJSONAPIID'
    QueryMetadata_pagination:
      description: Pagination properties.
      example:
        offset: 10
        limit: 1000
        next_offset: 1000
      properties:
        limit:
          description: maximum number of pages to return
          example: 1000
          format: int64
          type: integer
        next_offset:
          description: the next offset to retreive the next set of data
          example: 1000
          format: int64
          type: integer
        offset:
          description: the index of the first element in the results
          example: 10
          format: int64
          type: integer
    Service_attributes:
      description: The JSON API Schema attributes.
      example:
        created: 2000-01-23T04:56:07.000+00:00
        name: service name
        modified: 2000-01-23T04:56:07.000+00:00
      properties:
        created:
          description: Timestamp of when the service was created.
          format: date-time
          readOnly: true
          type: string
        modified:
          description: Timestamp of when the service was modified.
          format: date-time
          readOnly: true
          type: string
        name:
          description: Name of the service.
          example: service name
          type: string
    Team_attributes:
      description: The JSON API Schema attributes.
      example:
        created: 2000-01-23T04:56:07.000+00:00
        name: team name
        modified: 2000-01-23T04:56:07.000+00:00
      properties:
        created:
          description: Timestamp of when the team was created.
          format: date-time
          readOnly: true
          type: string
        modified:
          description: Timestamp of when the team was modified.
          format: date-time
          readOnly: true
          type: string
        name:
          description: Name of the team.
          example: team name
          type: string
    UserJSONAPIID_data:
      description: The User data.
      example:
        id: 00000000-0000-0000-0000-000000000000
        type: users
      properties:
        id:
          description: A unique identifier that represents the user.
          example: 00000000-0000-0000-0000-000000000000
          type: string
        type:
          default: users
          description: JSONAPI Model Type
          example: users
          type: string
    UserJSONAPIResponse_relationships_org:
      description: The Organization the user is associated with.
      example:
        data:
          id: 00000000-0000-0000-0000-000000000000
          type: orgs
      properties:
        data:
          $ref: '#/components/schemas/OrganizationJSONAPIID'
    UserJSONAPIResponse_relationships:
      description: Relationships for the User.
      example:
        org:
          data:
            id: 00000000-0000-0000-0000-000000000000
            type: orgs
      properties:
        org:
          $ref: '#/components/schemas/UserJSONAPIResponse_relationships_org'
  securitySchemes:
    apiKeyAuth:
      description: API Key
      in: header
      name: DD-API-KEY
      type: apiKey
    appKeyAuth:
      description: APP Key
      in: header
      name: DD-APPLICATION-KEY
      type: apiKey
x-group-parameters: true
