/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datadog

import (
	"encoding/json"
)

// IncidentFacetStatsAggregationDataSchema A `stats` aggregation for facets.
type IncidentFacetStatsAggregationDataSchema struct {
	// The average value.
	Avg NullableFloat64 `json:"avg,omitempty"`
	// The count of matches.
	Count NullableFloat64 `json:"count,omitempty"`
	// The max value.
	Max NullableFloat64 `json:"max,omitempty"`
	// The min value.
	Min NullableFloat64 `json:"min,omitempty"`
	// The sum of values.
	Sum NullableFloat64 `json:"sum,omitempty"`
}

// NewIncidentFacetStatsAggregationDataSchema instantiates a new IncidentFacetStatsAggregationDataSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIncidentFacetStatsAggregationDataSchema() *IncidentFacetStatsAggregationDataSchema {
	this := IncidentFacetStatsAggregationDataSchema{}
	return &this
}

// NewIncidentFacetStatsAggregationDataSchemaWithDefaults instantiates a new IncidentFacetStatsAggregationDataSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIncidentFacetStatsAggregationDataSchemaWithDefaults() *IncidentFacetStatsAggregationDataSchema {
	this := IncidentFacetStatsAggregationDataSchema{}
	return &this
}

// GetAvg returns the Avg field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IncidentFacetStatsAggregationDataSchema) GetAvg() float64 {
	if o == nil || o.Avg.Get() == nil {
		var ret float64
		return ret
	}
	return *o.Avg.Get()
}

// GetAvgOk returns a tuple with the Avg field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IncidentFacetStatsAggregationDataSchema) GetAvgOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Avg.Get(), o.Avg.IsSet()
}

// HasAvg returns a boolean if a field has been set.
func (o *IncidentFacetStatsAggregationDataSchema) HasAvg() bool {
	if o != nil && o.Avg.IsSet() {
		return true
	}

	return false
}

// SetAvg gets a reference to the given NullableFloat64 and assigns it to the Avg field.
func (o *IncidentFacetStatsAggregationDataSchema) SetAvg(v float64) {
	o.Avg.Set(&v)
}

// SetAvgNil sets the value for Avg to be an explicit nil
func (o *IncidentFacetStatsAggregationDataSchema) SetAvgNil() {
	o.Avg.Set(nil)
}

// UnsetAvg ensures that no value is present for Avg, not even an explicit nil
func (o *IncidentFacetStatsAggregationDataSchema) UnsetAvg() {
	o.Avg.Unset()
}

// GetCount returns the Count field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IncidentFacetStatsAggregationDataSchema) GetCount() float64 {
	if o == nil || o.Count.Get() == nil {
		var ret float64
		return ret
	}
	return *o.Count.Get()
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IncidentFacetStatsAggregationDataSchema) GetCountOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Count.Get(), o.Count.IsSet()
}

// HasCount returns a boolean if a field has been set.
func (o *IncidentFacetStatsAggregationDataSchema) HasCount() bool {
	if o != nil && o.Count.IsSet() {
		return true
	}

	return false
}

// SetCount gets a reference to the given NullableFloat64 and assigns it to the Count field.
func (o *IncidentFacetStatsAggregationDataSchema) SetCount(v float64) {
	o.Count.Set(&v)
}

// SetCountNil sets the value for Count to be an explicit nil
func (o *IncidentFacetStatsAggregationDataSchema) SetCountNil() {
	o.Count.Set(nil)
}

// UnsetCount ensures that no value is present for Count, not even an explicit nil
func (o *IncidentFacetStatsAggregationDataSchema) UnsetCount() {
	o.Count.Unset()
}

// GetMax returns the Max field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IncidentFacetStatsAggregationDataSchema) GetMax() float64 {
	if o == nil || o.Max.Get() == nil {
		var ret float64
		return ret
	}
	return *o.Max.Get()
}

// GetMaxOk returns a tuple with the Max field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IncidentFacetStatsAggregationDataSchema) GetMaxOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Max.Get(), o.Max.IsSet()
}

// HasMax returns a boolean if a field has been set.
func (o *IncidentFacetStatsAggregationDataSchema) HasMax() bool {
	if o != nil && o.Max.IsSet() {
		return true
	}

	return false
}

// SetMax gets a reference to the given NullableFloat64 and assigns it to the Max field.
func (o *IncidentFacetStatsAggregationDataSchema) SetMax(v float64) {
	o.Max.Set(&v)
}

// SetMaxNil sets the value for Max to be an explicit nil
func (o *IncidentFacetStatsAggregationDataSchema) SetMaxNil() {
	o.Max.Set(nil)
}

// UnsetMax ensures that no value is present for Max, not even an explicit nil
func (o *IncidentFacetStatsAggregationDataSchema) UnsetMax() {
	o.Max.Unset()
}

// GetMin returns the Min field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IncidentFacetStatsAggregationDataSchema) GetMin() float64 {
	if o == nil || o.Min.Get() == nil {
		var ret float64
		return ret
	}
	return *o.Min.Get()
}

// GetMinOk returns a tuple with the Min field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IncidentFacetStatsAggregationDataSchema) GetMinOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Min.Get(), o.Min.IsSet()
}

// HasMin returns a boolean if a field has been set.
func (o *IncidentFacetStatsAggregationDataSchema) HasMin() bool {
	if o != nil && o.Min.IsSet() {
		return true
	}

	return false
}

// SetMin gets a reference to the given NullableFloat64 and assigns it to the Min field.
func (o *IncidentFacetStatsAggregationDataSchema) SetMin(v float64) {
	o.Min.Set(&v)
}

// SetMinNil sets the value for Min to be an explicit nil
func (o *IncidentFacetStatsAggregationDataSchema) SetMinNil() {
	o.Min.Set(nil)
}

// UnsetMin ensures that no value is present for Min, not even an explicit nil
func (o *IncidentFacetStatsAggregationDataSchema) UnsetMin() {
	o.Min.Unset()
}

// GetSum returns the Sum field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IncidentFacetStatsAggregationDataSchema) GetSum() float64 {
	if o == nil || o.Sum.Get() == nil {
		var ret float64
		return ret
	}
	return *o.Sum.Get()
}

// GetSumOk returns a tuple with the Sum field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IncidentFacetStatsAggregationDataSchema) GetSumOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Sum.Get(), o.Sum.IsSet()
}

// HasSum returns a boolean if a field has been set.
func (o *IncidentFacetStatsAggregationDataSchema) HasSum() bool {
	if o != nil && o.Sum.IsSet() {
		return true
	}

	return false
}

// SetSum gets a reference to the given NullableFloat64 and assigns it to the Sum field.
func (o *IncidentFacetStatsAggregationDataSchema) SetSum(v float64) {
	o.Sum.Set(&v)
}

// SetSumNil sets the value for Sum to be an explicit nil
func (o *IncidentFacetStatsAggregationDataSchema) SetSumNil() {
	o.Sum.Set(nil)
}

// UnsetSum ensures that no value is present for Sum, not even an explicit nil
func (o *IncidentFacetStatsAggregationDataSchema) UnsetSum() {
	o.Sum.Unset()
}

func (o IncidentFacetStatsAggregationDataSchema) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Avg.IsSet() {
		toSerialize["avg"] = o.Avg.Get()
	}
	if o.Count.IsSet() {
		toSerialize["count"] = o.Count.Get()
	}
	if o.Max.IsSet() {
		toSerialize["max"] = o.Max.Get()
	}
	if o.Min.IsSet() {
		toSerialize["min"] = o.Min.Get()
	}
	if o.Sum.IsSet() {
		toSerialize["sum"] = o.Sum.Get()
	}
	return json.Marshal(toSerialize)
}

// AsIncidentFacetSchemaDataOneOf wraps this instance of IncidentFacetStatsAggregationDataSchema in IncidentFacetSchemaDataOneOf
func (s *IncidentFacetStatsAggregationDataSchema) AsIncidentFacetSchemaDataOneOf() IncidentFacetSchemaDataOneOf {
	return IncidentFacetSchemaDataOneOf{IncidentFacetSchemaDataOneOfInterface: s}
}

type NullableIncidentFacetStatsAggregationDataSchema struct {
	value *IncidentFacetStatsAggregationDataSchema
	isSet bool
}

func (v NullableIncidentFacetStatsAggregationDataSchema) Get() *IncidentFacetStatsAggregationDataSchema {
	return v.value
}

func (v *NullableIncidentFacetStatsAggregationDataSchema) Set(val *IncidentFacetStatsAggregationDataSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableIncidentFacetStatsAggregationDataSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableIncidentFacetStatsAggregationDataSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIncidentFacetStatsAggregationDataSchema(val *IncidentFacetStatsAggregationDataSchema) *NullableIncidentFacetStatsAggregationDataSchema {
	return &NullableIncidentFacetStatsAggregationDataSchema{value: val, isSet: true}
}

func (v NullableIncidentFacetStatsAggregationDataSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIncidentFacetStatsAggregationDataSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
