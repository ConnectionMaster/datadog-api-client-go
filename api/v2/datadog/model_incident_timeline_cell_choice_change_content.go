/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datadog

import (
	"encoding/json"
)

// IncidentTimelineCellChoiceChangeContent A Choice Change cell content schema.
type IncidentTimelineCellChoiceChangeContent struct {
	After  *IncidentTimelineCellChoiceChangeContentData `json:"after,omitempty"`
	Before *IncidentTimelineCellChoiceChangeContentData `json:"before,omitempty"`
	Choice IncidentTimelineCellChoiceChangeContentData  `json:"choice"`
}

// NewIncidentTimelineCellChoiceChangeContent instantiates a new IncidentTimelineCellChoiceChangeContent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIncidentTimelineCellChoiceChangeContent(choice IncidentTimelineCellChoiceChangeContentData) *IncidentTimelineCellChoiceChangeContent {
	this := IncidentTimelineCellChoiceChangeContent{}
	this.Choice = choice
	return &this
}

// NewIncidentTimelineCellChoiceChangeContentWithDefaults instantiates a new IncidentTimelineCellChoiceChangeContent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIncidentTimelineCellChoiceChangeContentWithDefaults() *IncidentTimelineCellChoiceChangeContent {
	this := IncidentTimelineCellChoiceChangeContent{}
	return &this
}

// GetAfter returns the After field value if set, zero value otherwise.
func (o *IncidentTimelineCellChoiceChangeContent) GetAfter() IncidentTimelineCellChoiceChangeContentData {
	if o == nil || o.After == nil {
		var ret IncidentTimelineCellChoiceChangeContentData
		return ret
	}
	return *o.After
}

// GetAfterOk returns a tuple with the After field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentTimelineCellChoiceChangeContent) GetAfterOk() (*IncidentTimelineCellChoiceChangeContentData, bool) {
	if o == nil || o.After == nil {
		return nil, false
	}
	return o.After, true
}

// HasAfter returns a boolean if a field has been set.
func (o *IncidentTimelineCellChoiceChangeContent) HasAfter() bool {
	if o != nil && o.After != nil {
		return true
	}

	return false
}

// SetAfter gets a reference to the given IncidentTimelineCellChoiceChangeContentData and assigns it to the After field.
func (o *IncidentTimelineCellChoiceChangeContent) SetAfter(v IncidentTimelineCellChoiceChangeContentData) {
	o.After = &v
}

// GetBefore returns the Before field value if set, zero value otherwise.
func (o *IncidentTimelineCellChoiceChangeContent) GetBefore() IncidentTimelineCellChoiceChangeContentData {
	if o == nil || o.Before == nil {
		var ret IncidentTimelineCellChoiceChangeContentData
		return ret
	}
	return *o.Before
}

// GetBeforeOk returns a tuple with the Before field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentTimelineCellChoiceChangeContent) GetBeforeOk() (*IncidentTimelineCellChoiceChangeContentData, bool) {
	if o == nil || o.Before == nil {
		return nil, false
	}
	return o.Before, true
}

// HasBefore returns a boolean if a field has been set.
func (o *IncidentTimelineCellChoiceChangeContent) HasBefore() bool {
	if o != nil && o.Before != nil {
		return true
	}

	return false
}

// SetBefore gets a reference to the given IncidentTimelineCellChoiceChangeContentData and assigns it to the Before field.
func (o *IncidentTimelineCellChoiceChangeContent) SetBefore(v IncidentTimelineCellChoiceChangeContentData) {
	o.Before = &v
}

// GetChoice returns the Choice field value
func (o *IncidentTimelineCellChoiceChangeContent) GetChoice() IncidentTimelineCellChoiceChangeContentData {
	if o == nil {
		var ret IncidentTimelineCellChoiceChangeContentData
		return ret
	}

	return o.Choice
}

// GetChoiceOk returns a tuple with the Choice field value
// and a boolean to check if the value has been set.
func (o *IncidentTimelineCellChoiceChangeContent) GetChoiceOk() (*IncidentTimelineCellChoiceChangeContentData, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Choice, true
}

// SetChoice sets field value
func (o *IncidentTimelineCellChoiceChangeContent) SetChoice(v IncidentTimelineCellChoiceChangeContentData) {
	o.Choice = v
}

func (o IncidentTimelineCellChoiceChangeContent) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.After != nil {
		toSerialize["after"] = o.After
	}
	if o.Before != nil {
		toSerialize["before"] = o.Before
	}
	if true {
		toSerialize["choice"] = o.Choice
	}
	return json.Marshal(toSerialize)
}

// AsIncidentTimelineCellCommonContentOneOf wraps this instance of IncidentTimelineCellChoiceChangeContent in IncidentTimelineCellCommonContentOneOf
func (s *IncidentTimelineCellChoiceChangeContent) AsIncidentTimelineCellCommonContentOneOf() IncidentTimelineCellCommonContentOneOf {
	return IncidentTimelineCellCommonContentOneOf{IncidentTimelineCellCommonContentOneOfInterface: s}
}

type NullableIncidentTimelineCellChoiceChangeContent struct {
	value *IncidentTimelineCellChoiceChangeContent
	isSet bool
}

func (v NullableIncidentTimelineCellChoiceChangeContent) Get() *IncidentTimelineCellChoiceChangeContent {
	return v.value
}

func (v *NullableIncidentTimelineCellChoiceChangeContent) Set(val *IncidentTimelineCellChoiceChangeContent) {
	v.value = val
	v.isSet = true
}

func (v NullableIncidentTimelineCellChoiceChangeContent) IsSet() bool {
	return v.isSet
}

func (v *NullableIncidentTimelineCellChoiceChangeContent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIncidentTimelineCellChoiceChangeContent(val *IncidentTimelineCellChoiceChangeContent) *NullableIncidentTimelineCellChoiceChangeContent {
	return &NullableIncidentTimelineCellChoiceChangeContent{value: val, isSet: true}
}

func (v NullableIncidentTimelineCellChoiceChangeContent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIncidentTimelineCellChoiceChangeContent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
