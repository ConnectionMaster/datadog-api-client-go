/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datadog

import (
	"encoding/json"
)

// IncidentFacetTermsAggregationDataSchema A `terms` aggregation for facets.
type IncidentFacetTermsAggregationDataSchema struct {
	// A count of the terms.
	Count NullableIncidentFacetTermsAggregationDataSchemaCountOneOf `json:"count,omitempty"`
	// The key value for the term.
	Name *IncidentFacetTermsAggregationDataSchemaNameOneOf `json:"name,omitempty"`
}

// NewIncidentFacetTermsAggregationDataSchema instantiates a new IncidentFacetTermsAggregationDataSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIncidentFacetTermsAggregationDataSchema() *IncidentFacetTermsAggregationDataSchema {
	this := IncidentFacetTermsAggregationDataSchema{}
	return &this
}

// NewIncidentFacetTermsAggregationDataSchemaWithDefaults instantiates a new IncidentFacetTermsAggregationDataSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIncidentFacetTermsAggregationDataSchemaWithDefaults() *IncidentFacetTermsAggregationDataSchema {
	this := IncidentFacetTermsAggregationDataSchema{}
	return &this
}

// GetCount returns the Count field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IncidentFacetTermsAggregationDataSchema) GetCount() IncidentFacetTermsAggregationDataSchemaCountOneOf {
	if o == nil || o.Count.Get() == nil {
		var ret IncidentFacetTermsAggregationDataSchemaCountOneOf
		return ret
	}
	return *o.Count.Get()
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IncidentFacetTermsAggregationDataSchema) GetCountOk() (*IncidentFacetTermsAggregationDataSchemaCountOneOf, bool) {
	if o == nil {
		return nil, false
	}
	return o.Count.Get(), o.Count.IsSet()
}

// HasCount returns a boolean if a field has been set.
func (o *IncidentFacetTermsAggregationDataSchema) HasCount() bool {
	if o != nil && o.Count.IsSet() {
		return true
	}

	return false
}

// SetCount gets a reference to the given NullableIncidentFacetTermsAggregationDataSchemaCountOneOf and assigns it to the Count field.
func (o *IncidentFacetTermsAggregationDataSchema) SetCount(v IncidentFacetTermsAggregationDataSchemaCountOneOf) {
	o.Count.Set(&v)
}

// SetCountNil sets the value for Count to be an explicit nil
func (o *IncidentFacetTermsAggregationDataSchema) SetCountNil() {
	o.Count.Set(nil)
}

// UnsetCount ensures that no value is present for Count, not even an explicit nil
func (o *IncidentFacetTermsAggregationDataSchema) UnsetCount() {
	o.Count.Unset()
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *IncidentFacetTermsAggregationDataSchema) GetName() IncidentFacetTermsAggregationDataSchemaNameOneOf {
	if o == nil || o.Name == nil {
		var ret IncidentFacetTermsAggregationDataSchemaNameOneOf
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentFacetTermsAggregationDataSchema) GetNameOk() (*IncidentFacetTermsAggregationDataSchemaNameOneOf, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *IncidentFacetTermsAggregationDataSchema) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given IncidentFacetTermsAggregationDataSchemaNameOneOf and assigns it to the Name field.
func (o *IncidentFacetTermsAggregationDataSchema) SetName(v IncidentFacetTermsAggregationDataSchemaNameOneOf) {
	o.Name = &v
}

func (o IncidentFacetTermsAggregationDataSchema) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Count.IsSet() {
		toSerialize["count"] = o.Count.Get()
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	return json.Marshal(toSerialize)
}

// AsIncidentFacetSchemaDataOneOf wraps this instance of IncidentFacetTermsAggregationDataSchema in IncidentFacetSchemaDataOneOf
func (s *IncidentFacetTermsAggregationDataSchema) AsIncidentFacetSchemaDataOneOf() IncidentFacetSchemaDataOneOf {
	return IncidentFacetSchemaDataOneOf{IncidentFacetSchemaDataOneOfInterface: s}
}

type NullableIncidentFacetTermsAggregationDataSchema struct {
	value *IncidentFacetTermsAggregationDataSchema
	isSet bool
}

func (v NullableIncidentFacetTermsAggregationDataSchema) Get() *IncidentFacetTermsAggregationDataSchema {
	return v.value
}

func (v *NullableIncidentFacetTermsAggregationDataSchema) Set(val *IncidentFacetTermsAggregationDataSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableIncidentFacetTermsAggregationDataSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableIncidentFacetTermsAggregationDataSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIncidentFacetTermsAggregationDataSchema(val *IncidentFacetTermsAggregationDataSchema) *NullableIncidentFacetTermsAggregationDataSchema {
	return &NullableIncidentFacetTermsAggregationDataSchema{value: val, isSet: true}
}

func (v NullableIncidentFacetTermsAggregationDataSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIncidentFacetTermsAggregationDataSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
