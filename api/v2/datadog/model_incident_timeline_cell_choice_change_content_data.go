/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datadog

import (
	"encoding/json"
)

// IncidentTimelineCellChoiceChangeContentData A Choice Change cell content schema for the choice selected.
type IncidentTimelineCellChoiceChangeContentData struct {
	// The choice id.
	Id string `json:"id"`
	// The choice name.
	Name string `json:"name"`
}

// NewIncidentTimelineCellChoiceChangeContentData instantiates a new IncidentTimelineCellChoiceChangeContentData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIncidentTimelineCellChoiceChangeContentData(id string, name string) *IncidentTimelineCellChoiceChangeContentData {
	this := IncidentTimelineCellChoiceChangeContentData{}
	this.Id = id
	this.Name = name
	return &this
}

// NewIncidentTimelineCellChoiceChangeContentDataWithDefaults instantiates a new IncidentTimelineCellChoiceChangeContentData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIncidentTimelineCellChoiceChangeContentDataWithDefaults() *IncidentTimelineCellChoiceChangeContentData {
	this := IncidentTimelineCellChoiceChangeContentData{}
	return &this
}

// GetId returns the Id field value
func (o *IncidentTimelineCellChoiceChangeContentData) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *IncidentTimelineCellChoiceChangeContentData) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *IncidentTimelineCellChoiceChangeContentData) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *IncidentTimelineCellChoiceChangeContentData) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *IncidentTimelineCellChoiceChangeContentData) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *IncidentTimelineCellChoiceChangeContentData) SetName(v string) {
	o.Name = v
}

func (o IncidentTimelineCellChoiceChangeContentData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["name"] = o.Name
	}
	return json.Marshal(toSerialize)
}

type NullableIncidentTimelineCellChoiceChangeContentData struct {
	value *IncidentTimelineCellChoiceChangeContentData
	isSet bool
}

func (v NullableIncidentTimelineCellChoiceChangeContentData) Get() *IncidentTimelineCellChoiceChangeContentData {
	return v.value
}

func (v *NullableIncidentTimelineCellChoiceChangeContentData) Set(val *IncidentTimelineCellChoiceChangeContentData) {
	v.value = val
	v.isSet = true
}

func (v NullableIncidentTimelineCellChoiceChangeContentData) IsSet() bool {
	return v.isSet
}

func (v *NullableIncidentTimelineCellChoiceChangeContentData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIncidentTimelineCellChoiceChangeContentData(val *IncidentTimelineCellChoiceChangeContentData) *NullableIncidentTimelineCellChoiceChangeContentData {
	return &NullableIncidentTimelineCellChoiceChangeContentData{value: val, isSet: true}
}

func (v NullableIncidentTimelineCellChoiceChangeContentData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIncidentTimelineCellChoiceChangeContentData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
